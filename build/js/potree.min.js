function Potree(){}function POCLoader(){}function PointAttributeNames(){}function PointAttribute(e,t,o){this.name=e,this.type=t,this.numElements=o,this.byteSize=this.numElements*this.type.size}function PointAttributes(e){if(this.attributes=new Array,this.byteSize=0,this.size=0,null!=e)for(var t in e){var o=e[t];this.attributes.push(o),this.byteSize+=o.byteSize,this.size++}}function LRUItem(e){this.previous=null,this.next=null,this.node=e}function LRU(){this.first=null,this.last=null,this.items={},this.elements=0,this.numPoints=0}Potree.pointLoadLimit=5e7,Potree.workers={},Potree.WorkerManager=function(e){this.code=e,this.instances=[],this.createdInstances=0},Potree.WorkerManager.prototype.getWorker=function(){var e=this.instances.pop();return void 0===e&&(e=Potree.utils.createWorker(this.code),this.createdInstances++),e},Potree.WorkerManager.prototype.returnWorker=function(e){this.instances.push(e)},Potree.WorkerManager.fromUrls=function(e){for(var t="",o=0;o<e.length;o++){var i=e[o],r=new XMLHttpRequest;r.open("GET",i,!1),r.responseType="text",r.overrideMimeType("text/plain; charset=x-user-defined"),r.send(null),200===r.status&&(t+=r.responseText+"\n")}return new Potree.WorkerManager(t)},THREE.PerspectiveCamera.prototype.zoomTo=function(e,t){if(e.geometry||e.boundingSphere){e.geometry&&null===e.geometry.boundingSphere&&e.geometry.computeBoundingSphere(),e.updateMatrixWorld();var o=t||1,i=e.boundingSphere||e.geometry.boundingSphere;i=i.clone().applyMatrix4(e.matrixWorld);var r=i.radius,n=this.fov*Math.PI/180;this.aspect<1&&(n*=this.aspect);var s=Math.abs(r/Math.sin(n/2))*o,a=new THREE.Vector3(0,0,-1).applyQuaternion(this.quaternion),l=a.multiplyScalar(-s);this.position.copy(i.center.clone().add(l))}},THREE.Ray.prototype.distanceToPlaneWithNegative=function(e){var t=e.normal.dot(this.direction);if(0==t)return 0==e.distanceToPoint(this.origin)?0:null;var o=-(this.origin.dot(e.normal)+e.constant)/t;return o},POCLoader.load=function(e,t){try{var o=new Potree.PointCloudOctreeGeometry;o.url=e;var i=new XMLHttpRequest;i.open("GET",e,!0),i.onreadystatechange=function(){if(4===i.readyState&&(200===i.status||0===i.status)){var r=JSON.parse(i.responseText);o.octreeDir=0===r.octreeDir.indexOf("http")?r.octreeDir:e+"/../"+r.octreeDir,o.spacing=r.spacing,o.pointAttributes=r.pointAttributes;var n=new THREE.Vector3(r.boundingBox.lx,r.boundingBox.ly,r.boundingBox.lz),s=new THREE.Vector3(r.boundingBox.ux,r.boundingBox.uy,r.boundingBox.uz),a=new THREE.Box3(n,s),l=a.clone();r.tightBoundingBox&&(l.min.copy(new THREE.Vector3(r.tightBoundingBox.lx,r.tightBoundingBox.ly,r.tightBoundingBox.lz)),l.max.copy(new THREE.Vector3(r.tightBoundingBox.ux,r.tightBoundingBox.uy,r.tightBoundingBox.uz)));var c=new THREE.Vector3(0,0,0);c.set(-n.x,-n.y,-n.z),a.min.add(c),a.max.add(c),l.min.add(c),l.max.add(c),o.boundingBox=a,o.tightBoundingBox=l,o.boundingSphere=a.getBoundingSphere(),o.tightBoundingSphere=l.getBoundingSphere(),o.offset=c,o.loader="LAS"===r.pointAttributes?new Potree.LasLazLoader(r.version):"LAZ"===r.pointAttributes?new Potree.LasLazLoader(r.version):new Potree.BinaryLoader(r.version,a,r.scale);var d={},h="r",u=new Potree.PointCloudOctreeGeometryNode(h,o,a);u.level=0,u.numPoints=r.hierarchy[0][1],o.root=u,o.root.load(),d[h]=u;for(var p=1;p<r.hierarchy.length;p++){var h=r.hierarchy[p][0],m=r.hierarchy[p][1],v=parseInt(h.charAt(h.length-1)),f=h.substring(0,h.length-1),E=d[f],y=h.length-1,a=POCLoader.createChildAABB(E.boundingBox,v),g=new Potree.PointCloudOctreeGeometryNode(h,o,a);g.level=y,g.numPoints=m,E.addChild(g),d[h]=g}o.nodes=d,t(o)}},i.send(null)}catch(r){console.log("loading failed: '"+e+"'"),console.log(r)}},POCLoader.loadPointAttributes=function(e){for(var t=e.pointAttributes,o=new PointAttributes,i=0;i<t.length;i++){var r=PointAttribute[t[i]];o.add(r)}return o},POCLoader.createChildAABB=function(e,t){var o,i,o=(THREE.Vector3,e.min),i=e.max,r=(new THREE.Vector3).copy(i).sub(o).multiplyScalar(.5),n=new THREE.Vector3(r.x,0,0),s=new THREE.Vector3(0,r.y,0),a=new THREE.Vector3(0,0,r.z),l=o,c=(new THREE.Vector3).add(o).add(r);return 1===t?(o=(new THREE.Vector3).copy(l).add(a),i=(new THREE.Vector3).copy(c).add(a)):3===t?(o=(new THREE.Vector3).copy(l).add(a).add(s),i=(new THREE.Vector3).copy(c).add(a).add(s)):0===t?(o=l,i=c):2===t?(o=(new THREE.Vector3).copy(l).add(s),i=(new THREE.Vector3).copy(c).add(s)):5===t?(o=(new THREE.Vector3).copy(l).add(a).add(n),i=(new THREE.Vector3).copy(c).add(a).add(n)):7===t?(o=(new THREE.Vector3).copy(l).add(r),i=(new THREE.Vector3).copy(c).add(r)):4===t?(o=(new THREE.Vector3).copy(l).add(n),i=(new THREE.Vector3).copy(c).add(n)):6===t&&(o=(new THREE.Vector3).copy(l).add(n).add(s),i=(new THREE.Vector3).copy(c).add(n).add(s)),new THREE.Box3(o,i)},PointAttributeNames.POSITION_CARTESIAN=0,PointAttributeNames.COLOR_PACKED=1,PointAttributeNames.COLOR_FLOATS_1=2,PointAttributeNames.COLOR_FLOATS_255=3,PointAttributeNames.NORMAL_FLOATS=4,PointAttributeNames.FILLER=5;var PointAttributeTypes={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}},i=0;for(var obj in PointAttributeTypes)PointAttributeTypes[i]=PointAttributeTypes[obj],i++;PointAttribute.POSITION_CARTESIAN=new PointAttribute(PointAttributeNames.POSITION_CARTESIAN,PointAttributeTypes.DATA_TYPE_FLOAT,3),PointAttribute.RGBA_PACKED=new PointAttribute(PointAttributeNames.COLOR_PACKED,PointAttributeTypes.DATA_TYPE_INT8,4),PointAttribute.COLOR_PACKED=PointAttribute.RGBA_PACKED,PointAttribute.RGB_PACKED=new PointAttribute(PointAttributeNames.COLOR_PACKED,PointAttributeTypes.DATA_TYPE_INT8,3),PointAttribute.NORMAL_FLOATS=new PointAttribute(PointAttributeNames.NORMAL_FLOATS,PointAttributeTypes.DATA_TYPE_FLOAT,3),PointAttribute.FILLER_1B=new PointAttribute(PointAttributeNames.FILLER,PointAttributeTypes.DATA_TYPE_UINT8,1),PointAttributes.prototype.add=function(e){this.attributes.push(e),this.byteSize+=e.byteSize,this.size++},PointAttributes.prototype.hasColors=function(){for(var e in this.attributes){var t=this.attributes[e];if(t.name===PointAttributeNames.COLOR_PACKED)return!0}return!1},PointAttributes.prototype.hasNormals=function(){for(var e in this.attributes){var t=this.attributes[e];if(t===PointAttribute.NORMAL_FLOATS)return!0}return!1},Potree.BinaryLoader=function(e,t,o){this.version="string"==typeof e?new Potree.Version(e):e,this.boundingBox=t,this.scale=o},Potree.BinaryLoader.prototype.newerVersion=function(){},Potree.BinaryLoader.prototype.load=function(e){if(!e.loaded){var t=e.pcoGeometry.octreeDir+"/"+e.name;this.version.newerThan("1.3")&&(t+=".bin");var o=this,i=new XMLHttpRequest;i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onreadystatechange=function(){if(4===i.readyState)if(200===i.status||0===i.status){var r=i.response;o.parse(e,r)}else console.log("Failed to load file! HTTP status: "+i.status+", file: "+t)};try{i.send(null)}catch(r){console.log("fehler beim laden der punktwolke: "+r)}}},Potree.BinaryLoader.prototype.parse=function(e,t){for(var o=new THREE.BufferGeometry,i=t.byteLength/16,r=new Float32Array(3*i),n=new Float32Array(3*i),s=new ArrayBuffer(4*i),a=new THREE.Color,l=new Float32Array(t),c=new Int32Array(t),d=new Uint8Array(t),h=new Uint32Array(s),u=0;i>u;u++)this.version.newerThan("1.3")?(r[3*u+0]=c[4*u+0]*this.scale+e.boundingBox.min.x,r[3*u+1]=c[4*u+1]*this.scale+e.boundingBox.min.y,r[3*u+2]=c[4*u+2]*this.scale+e.boundingBox.min.z):(r[3*u+0]=l[4*u+0]+e.pcoGeometry.offset.x,r[3*u+1]=l[4*u+1]+e.pcoGeometry.offset.y,r[3*u+2]=l[4*u+2]+e.pcoGeometry.offset.z),a.setRGB(d[16*u+12],d[16*u+13],d[16*u+14]),n[3*u+0]=a.r/255,n[3*u+1]=a.g/255,n[3*u+2]=a.b/255,h[u]=u;o.addAttribute("position",new THREE.BufferAttribute(r,3)),o.addAttribute("color",new THREE.BufferAttribute(n,3)),o.addAttribute("indices",new THREE.BufferAttribute(s,1)),o.boundingBox=e.boundingBox,e.geometry=o,e.loaded=!0,e.loading=!1,e.pcoGeometry.numNodesLoading--},Potree.LasLazLoader=function(e){this.version="string"==typeof e?new Potree.Version(e):e},Potree.LasLazLoader.prototype.load=function(e){if(!e.loaded){var t=e.pcoGeometry.pointAttributes,o=e.pcoGeometry.octreeDir+"/"+e.name+"."+t.toLowerCase(),i=this,r=new XMLHttpRequest;r.open("GET",o,!0),r.responseType="arraybuffer",r.overrideMimeType("text/plain; charset=x-user-defined"),r.onreadystatechange=function(){if(4===r.readyState)if(200===r.status){var t=r.response;i.parse(e,t)}else console.log("Failed to load file! HTTP status: "+r.status+", file: "+o)},r.send(null)}},Potree.LasLazLoader.progressCB=function(){},Potree.LasLazLoader.prototype.parse=function(e,t){var o=new LASFile(t),i=new Potree.LasLazBatcher(e);return Promise.resolve(o).cancellable().then(function(e){return e.open().then(function(){return e.isOpen=!0,e}).catch(Promise.CancellationError,function(t){return e.close().then(function(){throw t})})}).then(function(e){return e.getHeader().then(function(t){return[e,t]})}).then(function(e){var t=e[0],o=e[1],r=1,n=0,s=1>=r?o.pointsCount:o.pointsCount/r,a=function(){var e=t.readData(1e6,0,r);return e.then(function(e){return i.push(new LASDecoder(e.buffer,o.pointsFormatId,o.pointsStructSize,e.count,o.scale,o.offset,o.mins,o.maxs)),n+=e.count,Potree.LasLazLoader.progressCB(n/s),e.hasMoreData?a():(o.totalRead=n,o.versionAsString=t.versionAsString,o.isCompressed=t.isCompressed,[t,o,i])})};return a()}).then(function(e){var t=e[0];return Potree.LasLazLoader.progressCB(1),t.close().then(function(){return t.isOpen=!1,Promise.delay(200).cancellable()}).then(function(){return e.slice(1)})}).catch(Promise.CancellationError,function(e){if(o.isOpen)return o.close().then(function(){throw o.isOpen=!1,e});throw e})},Potree.LasLazLoader.prototype.handle=function(){},Potree.LasLazBatcher=function(e){this.push=function(t){var o=Potree.workers.lasdecoder.getWorker(),i=new THREE.Vector3(t.mins[0],t.mins[1],t.mins[2]),r=new THREE.Vector3(t.maxs[0],t.maxs[1],t.maxs[2]);i.add(e.pcoGeometry.offset),r.add(e.pcoGeometry.offset),o.onmessage=function(n){for(var s=new THREE.BufferGeometry,a=t.pointsCount,l=n.data.position,c=n.data.color,d=n.data.intensity,h=new Uint8Array(n.data.classification),u=new Float32Array(h.byteLength),p=new Uint8Array(n.data.returnNumber),m=new Float32Array(p.byteLength),v=new Uint16Array(n.data.pointSourceID),f=new Float32Array(v.length),E=new ArrayBuffer(4*a),y=new Uint32Array(E),g=new THREE.Box3,T=new Float32Array(l),b=0;a>b;b++)u[b]=h[b],m[b]=p[b],f[b]=v[b],y[b]=b,g.expandByPoint(new THREE.Vector3(T[3*b+0],T[3*b+1],T[3*b+2]));s.addAttribute("position",new THREE.BufferAttribute(new Float32Array(l),3)),s.addAttribute("color",new THREE.BufferAttribute(new Float32Array(c),3)),s.addAttribute("intensity",new THREE.BufferAttribute(new Float32Array(d),1)),s.addAttribute("classification",new THREE.BufferAttribute(new Float32Array(u),1)),s.addAttribute("returnNumber",new THREE.BufferAttribute(new Float32Array(m),1)),s.addAttribute("pointSourceID",new THREE.BufferAttribute(new Float32Array(f),1)),s.addAttribute("indices",new THREE.BufferAttribute(E,1)),s.boundingBox=new THREE.Box3(i,r),e.boundingBox=s.boundingBox,e.geometry=s,e.loaded=!0,e.loading=!1,e.pcoGeometry.numNodesLoading--,Potree.workers.lasdecoder.returnWorker(o)};var n={buffer:t.arrayb,numPoints:t.pointsCount,pointSize:t.pointSize,pointFormatID:2,scale:t.scale,offset:t.offset,mins:[e.pcoGeometry.boundingBox.min.x,e.pcoGeometry.boundingBox.min.y,e.pcoGeometry.boundingBox.min.z],maxs:[e.pcoGeometry.boundingBox.max.x,e.pcoGeometry.boundingBox.max.y,e.pcoGeometry.boundingBox.max.z],bbOffset:[e.pcoGeometry.offset.x,e.pcoGeometry.offset.y,e.pcoGeometry.offset.z]};o.postMessage(n,[n.buffer])}},Potree.PointSizeType={FIXED:0,ATTENUATED:1,ADAPTIVE:2},Potree.PointShape={SQUARE:0,CIRCLE:1},Potree.PointColorType={RGB:0,COLOR:1,DEPTH:2,HEIGHT:3,INTENSITY:4,INTENSITY_GRADIENT:5,OCTREE_DEPTH:6,POINT_INDEX:7,CLASSIFICATION:8,RETURN_NUMBER:9,SOURCE:10},Potree.ClipMode={DISABLED:0,CLIP_OUTSIDE:1,HIGHLIGHT_INSIDE:2},Potree.PointCloudMaterial=function(e){e=e||{};var t=new THREE.Color(0),o=THREE.ImageUtils.generateDataTexture(2048,1,t);o.magFilter=THREE.NearestFilter,this.visibleNodesTexture=o;var i=e.size||1,r=e.minSize||1,n=1;this._pointSizeType=Potree.PointSizeType.ATTENUATED,this._pointShape=Potree.PointShape.SQUARE,this._interpolate=!1,this._pointColorType=Potree.PointColorType.RGB,this._octreeLevels=6,this._useClipBox=!1,this.numClipBoxes=0,this._clipMode=Potree.ClipMode.DISABLED,this._weighted=!1,this._blendDepth=.1,this._depthMap,this.gradientTexture=Potree.PointCloudMaterial.generateGradient();var s={},a={spacing:{type:"f",value:1},fov:{type:"f",value:1},screenWidth:{type:"f",value:1},screenHeight:{type:"f",value:1},near:{type:"f",value:.1},far:{type:"f",value:1},uColor:{type:"c",value:new THREE.Color(16711680)},opacity:{type:"f",value:1},size:{type:"f",value:10},minSize:{type:"f",value:2},nodeSize:{type:"f",value:n},heightMin:{type:"f",value:0},heightMax:{type:"f",value:1},intensityMin:{type:"f",value:0},intensityMax:{type:"f",value:1},visibleNodes:{type:"t",value:this.visibleNodesTexture},pcIndex:{type:"f",value:0},gradient:{type:"t",value:this.gradientTexture},clipBoxes:{type:"Matrix4fv",value:[]},blendDepth:{type:"f",value:this._blendDepth},depthMap:{type:"t",value:null}};this.setValues({uniforms:a,attributes:s,vertexShader:this.getDefines()+Potree.PointCloudMaterial.vs_points.join("\n"),fragmentShader:this.getDefines()+Potree.PointCloudMaterial.fs_points_rgb.join("\n"),vertexColors:THREE.VertexColors,size:i,minSize:r,nodeSize:n,pcIndex:0,alphaTest:.9})},Potree.PointCloudMaterial.prototype=new THREE.RawShaderMaterial,Potree.PointCloudMaterial.prototype.updateShaderSource=function(){var e={};this.pointColorType===Potree.PointColorType.INTENSITY||this.pointColorType===Potree.PointColorType.INTENSITY_GRADIENT?e.intensity={type:"f",value:[]}:this.pointColorType===Potree.PointColorType.CLASSIFICATION?e.classification={type:"f",value:[]}:this.pointColorType===Potree.PointColorType.RETURN_NUMBER?e.returnNumber={type:"f",value:[]}:this.pointColorType===Potree.PointColorType.SOURCE&&(e.pointSourceID={type:"f",value:[]}),this.setValues({attributes:e,vertexShader:this.getDefines()+Potree.PointCloudMaterial.vs_points.join("\n"),fragmentShader:this.getDefines()+Potree.PointCloudMaterial.fs_points_rgb.join("\n")}),this.depthMap&&(this.uniforms.depthMap.value=this.depthMap,this.setValues({depthMap:this.depthMap})),this.setValues(1===this.opacity?{blending:THREE.NoBlending,transparent:!1,depthTest:!0,depthWrite:!0}:{blending:THREE.AdditiveBlending,transparent:!0,depthTest:!1,depthWrite:!0}),this.weighted&&this.setValues({blending:THREE.AdditiveBlending,transparent:!0,depthTest:!0,depthWrite:!1}),this.needsUpdate=!0},Potree.PointCloudMaterial.prototype.getDefines=function(){var e="";return this.pointSizeType===Potree.PointSizeType.FIXED?e+="#define fixed_point_size\n":this.pointSizeType===Potree.PointSizeType.ATTENUATED?e+="#define attenuated_point_size\n":this.pointSizeType===Potree.PointSizeType.ADAPTIVE&&(e+="#define adaptive_point_size\n",e+="#define octreeLevels "+Math.max(0,this._octreeLevels-2).toFixed(1)+"\n"),this.pointShape===Potree.PointShape.SQUARE?e+="#define square_point_shape\n":this.pointShape===Potree.PointShape.CIRCLE&&(e+="#define circle_point_shape\n"),this._interpolate&&(e+="#define use_interpolation\n"),this._pointColorType===Potree.PointColorType.RGB?e+="#define color_type_rgb\n":this._pointColorType===Potree.PointColorType.COLOR?e+="#define color_type_color\n":this._pointColorType===Potree.PointColorType.DEPTH?e+="#define color_type_depth\n":this._pointColorType===Potree.PointColorType.HEIGHT?e+="#define color_type_height\n":this._pointColorType===Potree.PointColorType.INTENSITY?e+="#define color_type_intensity\n":this._pointColorType===Potree.PointColorType.INTENSITY_GRADIENT?e+="#define color_type_intensity_gradient\n":this._pointColorType===Potree.PointColorType.OCTREE_DEPTH?e+="#define color_type_octree_depth\n":this._pointColorType===Potree.PointColorType.POINT_INDEX?e+="#define color_type_point_index\n":this._pointColorType===Potree.PointColorType.CLASSIFICATION?e+="#define color_type_classification\n":this._pointColorType===Potree.PointColorType.RETURN_NUMBER?e+="#define color_type_return_number\n":this._pointColorType===Potree.PointColorType.SOURCE&&(e+="#define color_type_source\n"),this.clipMode===Potree.ClipMode.DISABLED?e+="#define clip_disabled\n":this.clipMode===Potree.ClipMode.CLIP_OUTSIDE?e+="#define clip_outside\n":this.clipMode===Potree.ClipMode.HIGHLIGHT_INSIDE&&(e+="#define clip_highlight_inside\n"),this.weighted&&(e+="#define weighted_splats\n"),this.numClipBoxes>0&&(e+="#define use_clip_box\n",e+="#define clip_box_count "+this.numClipBoxes+"\n"),e},Potree.PointCloudMaterial.prototype.setClipBoxes=function(e){var t=e.length;this.numClipBoxes=t,this.uniforms.clipBoxes.value.length/16!==t&&(this.uniforms.clipBoxes.value=new Float32Array(16*t),this.updateShaderSource());for(var o=0;t>o;o++){var i=e[o];this.uniforms.clipBoxes.value.set(i.elements,16*o)}},Object.defineProperty(Potree.PointCloudMaterial.prototype,"spacing",{get:function(){return this.uniforms.spacing.value},set:function(e){this.uniforms.spacing.value!==e&&(this.uniforms.spacing.value=e)}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"blendDepth",{get:function(){return this.uniforms.blendDepth.value},set:function(e){this.uniforms.blendDepth.value!==e&&(this.uniforms.blendDepth.value=e)}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"useClipBox",{get:function(){return this._useClipBox},set:function(e){this._useClipBox!==e&&(this._useClipBox=e,this.updateShaderSource())}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"weighted",{get:function(){return this._weighted},set:function(e){this._weighted!==e&&(this._weighted=e,this.updateShaderSource())}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"fov",{get:function(){return this.uniforms.fov.value},set:function(e){this.uniforms.fov.value!==e&&(this.uniforms.fov.value=e)}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"screenWidth",{get:function(){return this.uniforms.screenWidth.value},set:function(e){this.uniforms.screenWidth.value!==e&&(this.uniforms.screenWidth.value=e)}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"screenHeight",{get:function(){return this.uniforms.screenHeight.value},set:function(e){this.uniforms.screenHeight.value!==e&&(this.uniforms.screenHeight.value=e)}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"near",{get:function(){return this.uniforms.near.value},set:function(e){this.uniforms.near.value!==e&&(this.uniforms.near.value=e)}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"far",{get:function(){return this.uniforms.far.value},set:function(e){this.uniforms.far.value!==e&&(this.uniforms.far.value=e)}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"opacity",{get:function(){return this.uniforms.opacity.value},set:function(e){this.uniforms.opacity.value!==e&&(this.uniforms.opacity.value=e,this.updateShaderSource())}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"octreeLevels",{get:function(){return this._octreeLevels},set:function(e){this._octreeLevels!==e&&(this._octreeLevels=e,this.updateShaderSource())}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"pointColorType",{get:function(){return this._pointColorType},set:function(e){this._pointColorType!==e&&(this._pointColorType=e,this.updateShaderSource())}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"depthMap",{get:function(){return this._depthMap},set:function(e){this._depthMap!==e&&(this._depthMap=e,this.updateShaderSource())}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"pointSizeType",{get:function(){return this._pointSizeType},set:function(e){this._pointSizeType!==e&&(this._pointSizeType=e,this.updateShaderSource())}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"clipMode",{get:function(){return this._clipMode},set:function(e){this._clipMode!==e&&(this._clipMode=e,this.updateShaderSource())}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"interpolate",{get:function(){return this._interpolate},set:function(e){this._interpolate!==e&&(this._interpolate=e,this.updateShaderSource())}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"color",{get:function(){return this.uniforms.uColor.value},set:function(e){this.uniforms.uColor.value!==e&&(this.uniforms.uColor.value.copy(e),this.updateShaderSource())}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"pointShape",{get:function(){return this._pointShape},set:function(e){this._pointShape!==e&&(this._pointShape=e,this.updateShaderSource())}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"size",{get:function(){return this.uniforms.size.value},set:function(e){this.uniforms.size.value=e}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"minSize",{get:function(){return this.uniforms.minSize.value},set:function(e){this.uniforms.minSize.value=e}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"heightMin",{get:function(){return this.uniforms.heightMin.value},set:function(e){this.uniforms.heightMin.value=e}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"heightMax",{get:function(){return this.uniforms.heightMax.value},set:function(e){this.uniforms.heightMax.value=e}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"intensityMin",{get:function(){return this.uniforms.intensityMin.value},set:function(e){this.uniforms.intensityMin.value=e}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"intensityMax",{get:function(){return this.uniforms.intensityMax.value},set:function(e){this.uniforms.intensityMax.value=e}}),Object.defineProperty(Potree.PointCloudMaterial.prototype,"pcIndex",{get:function(){return this.uniforms.pcIndex.value},set:function(e){this.uniforms.pcIndex.value=e}}),Potree.PointCloudMaterial.generateGradient=function(){var e=64;canvas=document.createElement("canvas"),canvas.width=e,canvas.height=e;var t=canvas.getContext("2d");t.rect(0,0,e,e);var o=t.createLinearGradient(0,0,e,e);o.addColorStop(0,"#4700b6"),o.addColorStop(1/6,"blue"),o.addColorStop(2/6,"aqua"),o.addColorStop(.5,"green"),o.addColorStop(4/6,"yellow"),o.addColorStop(5/6,"orange"),o.addColorStop(1,"red"),t.fillStyle=o,t.fill();var i=new THREE.Texture(canvas);return i.needsUpdate=!0,textureImage=i.image,i},Potree.PointCloudMaterial.vs_points=["precision mediump float;                                                           ","precision mediump int;                                                             ","                                                                                   ","attribute vec3 position;                                                           ","attribute vec3 color;                                                              ","attribute float intensity;                                                         ","attribute float classification;                                                    ","attribute float returnNumber;                                                      ","attribute float pointSourceID;                                                     ","attribute vec4 indices;                                                            ","                                                                                   ","uniform mat4 modelMatrix;                                                          ","uniform mat4 modelViewMatrix;                                                      ","uniform mat4 projectionMatrix;                                                     ","uniform mat4 viewMatrix;                                                           ","uniform mat3 normalMatrix;                                                         ","uniform vec3 cameraPosition;                                                       ","uniform float screenWidth;                                                         ","uniform float screenHeight;                                                        ","uniform float fov;                                                                 ","uniform float spacing;                                                             ","uniform float blendDepth;                                                             ","uniform float near;                                                                ","uniform float far;                                                                 ","                                                                                   ","#if defined use_clip_box                                                                                   ","	uniform mat4 clipBoxes[clip_box_count];                                                                                   ","#endif                                                                                   ","                                                                                   ","                                                                                   ","uniform float heightMin;                                                           ","uniform float heightMax;                                                           ","uniform float intensityMin;                                                        ","uniform float intensityMax;                                                        ","uniform float size;                                                                ","uniform float minSize;                                                             ","uniform float nodeSize;                                                            ","uniform vec3 uColor;                                                               ","uniform float opacity;                                                                                   ","                                                                                   ","                                                                                   ","uniform sampler2D visibleNodes;                                                    ","uniform sampler2D gradient;                                                        ","uniform sampler2D depthMap;                                                        ","                                                                                   ","varying float vOpacity;                                                                                   ","varying vec3 vColor;                                                               ","varying float vDepth;                                                                                   ","varying float vLinearDepth;                                                                                   ","                                                                                   ","                                                                                   ","#if defined(adaptive_point_size) || defined(color_type_octree_depth)               ","/**                                                                                "," * number of 1-bits up to inclusive index position                                 "," * number is treated as if it were an integer in the range 0-255                   "," *                                                                                 "," */                                                                                ","float numberOfOnes(float number, float index){                                     ","	float tmp = mod(number, pow(2.0, index + 1.0));                                  ","	float numOnes = 0.0;                                                             ","	for(float i = 0.0; i < 8.0; i++){                                                ","		if(mod(tmp, 2.0) != 0.0){                                                    ","			numOnes++;                                                               ","		}                                                                            ","		tmp = floor(tmp / 2.0);                                                      ","	}                                                                                ","	return numOnes;                                                                  ","}                                                                                  ","                                                                                   ","                                                                                   ","/**                                                                                "," * checks whether the bit at index is 1                                            "," * number is treated as if it were an integer in the range 0-255                   "," *                                                                                 "," */                                                                                ","bool isBitSet(float number, float index){                                          ","	return mod(floor(number / pow(2.0, index)), 2.0) != 0.0;                         ","}                                                                                  ","                                                                                   ","                                                                                   ","/**                                                                                "," * find the octree depth at the point position                                     "," */                                                                                ","float getOctreeDepth(){                                                            ","	vec3 offset = vec3(0.0, 0.0, 0.0);                                               ","	float iOffset = 0.0;                                                             ","	float depth = 0.0;                                                               ","	for(float i = 0.0; i <= octreeLevels + 1.0; i++){                                ","		                                                                             ","		float nodeSizeAtLevel = nodeSize / pow(2.0, i);                              ","		vec3 index3d = (position - offset) / nodeSizeAtLevel;                        ","		index3d = floor(index3d + 0.5);                                              ","		float index = 4.0*index3d.x + 2.0*index3d.y + index3d.z;                     ","		                                                                             ","		vec4 value = texture2D(visibleNodes, vec2(iOffset / 2048.0, 0.0));           ","		float mask = value.r * 255.0;                                                ","		if(isBitSet(mask, index)){                                                   ","			// there are more visible child nodes at this position                   ","			iOffset = iOffset + value.g * 255.0 + numberOfOnes(mask, index - 1.0);   ","			depth++;                                                                 ","		}else{                                                                       ","			// no more visible child nodes at this position                          ","			return depth;                                                            ","		}                                                                            ","		offset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;   ","	}                                                                                ","		                                                                             ","	return depth;                                                                    ","}                                                                                  ","                                                                                   ","#endif                                                                             ","                                                                                   ","vec3 classificationColor(float classification){                                                                                   ","	vec3 color = vec3(0.0, 0.0, 0.0);                                                                                   ","  float c = mod(classification, 16.0);                                                                                   ","	if(c == 0.0){ ","	   color = vec3(0.5, 0.5, 0.5); ","	}else if(c == 1.0){ ","	   color = vec3(0.5, 0.5, 0.5); ","	}else if(c == 2.0){ ","	   color = vec3(0.63, 0.32, 0.18); ","	}else if(c == 3.0){ ","	   color = vec3(0.0, 1.0, 0.0); ","	}else if(c == 4.0){ ","	   color = vec3(0.0, 0.8, 0.0); ","	}else if(c == 5.0){ ","	   color = vec3(0.0, 0.6, 0.0); ","	}else if(c == 6.0){ ","	   color = vec3(1.0, 0.66, 0.0); ","	}else if(c == 7.0){ ","	   color = vec3(1.0, 0, 1.0); ","	}else if(c == 8.0){ ","	   color = vec3(1.0, 0, 0.0); ","	}else if(c == 9.0){ ","	   color = vec3(0.0, 0.0, 1.0); ","	}else if(c == 12.0){ ","	   color = vec3(1.0, 1.0, 0.0); ","	}else{ ","	   color = vec3(0.3, 0.6, 0.6); ","	} ","	                                                                                   ","	return color;                                                                                   ","}                                                                                   ","                                                                                   ","void main() {                                                                      ","                                                                                   ","	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );                       ","	gl_Position = projectionMatrix * mvPosition;                                     ","  //float pw = gl_Position.w;                                                                                 ","  //float pd = gl_Position.z;                                                                                 ","  //gl_Position = gl_Position / pw;                                                                                 ","  //gl_Position.z = 2.0*((pw - near) / far)-1.0;                                                                                 ","  vOpacity = opacity;                                                                                 ","  vLinearDepth = -mvPosition.z;                                                                                 ","  vDepth = mvPosition.z / gl_Position.w;                                                                                 ","                                                                                   ","  // COLOR TYPES                                                                   ","                                                                                   ","  #ifdef color_type_rgb                                                            ","		vColor = color;                                                              ","  #elif defined color_type_height                                                  ","      vec4 world = modelMatrix * vec4( position, 1.0 );                            ","      float w = (world.y - heightMin) / (heightMax-heightMin);                     ","                                                                                   ","  	vColor = texture2D(gradient, vec2(w,1.0-w)).rgb;                             ","  #elif defined color_type_depth                                                   ","      float d = -mvPosition.z ;                                                                             ","      vColor = vec3(d, vDepth, 0.0);                                                                             ","  #elif defined color_type_intensity                                               ","      float w = (intensity - intensityMin) / intensityMax;                         ","		vColor = vec3(w, w, w);                                                      ","  	//vColor = texture2D(gradient, vec2(w,1.0-w)).rgb;                           ","  #elif defined color_type_intensity_gradient                                      ","      float w = (intensity - intensityMin) / intensityMax;                         ","  	vColor = texture2D(gradient, vec2(w,1.0-w)).rgb;                             ","  #elif defined color_type_color                                                   ","  	vColor = uColor;                                                             ","  #elif defined color_type_octree_depth                                            ","  	float depth = getOctreeDepth();                                              ","      float w = depth / 10.0;                                                      ","  	vColor = texture2D(gradient, vec2(w,1.0-w)).rgb;                             ","  #elif defined color_type_point_index                                             ","  	vColor = indices.rgb;                                                        ","  #elif defined color_type_classification                                             ","  	vColor = classificationColor(classification);                               ","  #elif defined color_type_return_number                                             ","      float w = (returnNumber - 1.0) / 4.0 + 0.1;                                                      ","  	vColor = texture2D(gradient, vec2(w, 1.0 - w)).rgb;                             ","  #elif defined color_type_source                                             ","      float w = mod(pointSourceID, 10.0) / 10.0;                                                                             ","  	vColor = texture2D(gradient, vec2(w,1.0 - w)).rgb;                               ","  #endif                                                                           ","                                                                                   ","                                                                                   ","                                                                                   ","  //                                                                               ","  // POINT SIZE TYPES                                                              ","  //                                                                               ","  float r = spacing * 1.5;                                                                                 ","  #if defined fixed_point_size                                                     ","  	gl_PointSize = size;                                                         ","  #elif defined attenuated_point_size                                              ","		//gl_PointSize = size * ( 300.0 / length( mvPosition.xyz ) );                  ","      gl_PointSize = (1.0 / tan(fov/2.0)) * size / (-mvPosition.z);                                                                                 ","      gl_PointSize = gl_PointSize * screenHeight / 2.0;                                                                              ","  #elif defined adaptive_point_size                                                ","      //gl_PointSize = size * ( 300.0 / length( mvPosition.xyz ) );                  ","      //gl_PointSize = (1.0 / tan(fov/2.0)) * r / sqrt( max(0.0, mvPosition.z * mvPosition.z - r * r));                                                                                 ","      gl_PointSize = (1.0 / tan(fov/2.0)) * r / (-mvPosition.z);                                                                                 ","      gl_PointSize = size * gl_PointSize * screenHeight / 2.0;                                                                              ","  	gl_PointSize = gl_PointSize / pow(1.9, getOctreeDepth());                    ","  #endif                                                                           ","                                                                                    ","	gl_PointSize = max(minSize, gl_PointSize);                                       ","	gl_PointSize = min(50.0, gl_PointSize);                                          ","                                                                                     ","  // clip box                                                                                  ","  #if defined use_clip_box                                                                                 ","      bool insideAny = false;                                                                               ","      for(int i = 0; i < clip_box_count; i++){                                                                               ","      	vec4 clipPosition = clipBoxes[i] * modelMatrix * vec4( position, 1.0 );                                                                                     ","      	bool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;                                                                             ","      	inside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;                                                                             ","      	inside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;                                                                             ","      	insideAny = insideAny || inside;                                                                               ","      }                                                                               ","      if(!insideAny){                                                                               ","                                                                                     ","          #if defined clip_outside                                                                           ","      		gl_Position = vec4(1000.0, 1000.0, 1000.0, 1.0);                                                                               ","          #elif defined clip_highlight_inside && !defined(color_type_depth)                                                                           ","         		float c = (vColor.r + vColor.g + vColor.b) / 6.0;                                                                           ","          	//vColor = vec3(c, c, c);                                                                           ","          #endif                                                                           ","      }else{                                                                               ","      	#if defined clip_highlight_inside                                                                               ","      	vColor.r += 0.5;                                                                               ","          #endif                                                                           ","      }                                                                               ","                                                                                     ","  #endif                                                                                  ","                                                                                   ","                                                                                   ","}                                                                                  "],Potree.PointCloudMaterial.fs_points_rgb=["#if defined use_interpolation                                                      ","	#extension GL_EXT_frag_depth : enable                                            ","#endif                                                                             ","                                                                                   ","precision mediump float;                                                             ","precision mediump int;                                                               ","                                                                                   ","//uniform float opacity;                                                             ","uniform float pcIndex;                                                             ","uniform float screenWidth;                                                         ","uniform float screenHeight;                                                        ","uniform float blendDepth;                                                                                   ","                                                                                   ","uniform sampler2D depthMap;                                                                                   ","                                                                                   ","varying vec3 vColor;                                                               ","varying float vOpacity;                                                                                    ","varying float vLinearDepth;                                                                                    ","varying float vDepth;                                                                                    ","                                                                                   ","void main() {                                                                      ","	                                                                                 ","	#if defined(circle_point_shape) || defined(use_interpolation) || defined (weighted_splats)                    ","		float a = pow(2.0*(gl_PointCoord.x - 0.5), 2.0);                             ","		float b = pow(2.0*(gl_PointCoord.y - 0.5), 2.0);                             ","		float c = 1.0 - (a + b);                                                     ","  	                                                                             ","		if(c < 0.0){                                                                 ","			discard;                                                                 ","		}                                                                            ","	#endif                                                                           ","		                                                                                 ","	#if defined weighted_splats                                                                                  ","		vec2 uv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);                                                                                 ","		                                                                                 ","	    float depth = texture2D(depthMap, uv).r;                                                                             ","	    if(vLinearDepth > depth + blendDepth){                                                                             ","	    	discard;                                                                             ","	    }                                                                             ","	#endif                                                                                 ","	                                                                                 ","	#if defined use_interpolation                                                    ","		gl_FragDepthEXT = gl_FragCoord.z + 0.002*(1.0-pow(c, 1.0)) * gl_FragCoord.w; ","	#endif                                                                           ","	                                                                                 ","	                                                                                 ","	#if defined color_type_point_index                                               ","		gl_FragColor = vec4(vColor, pcIndex / 255.0);                                ","	#else                                                                            ","		gl_FragColor = vec4(vColor, vOpacity);                                        ","	#endif                                                                           ","	                                                                                 ","	                                                                                 ","	#if defined weighted_splats                                                                                 ","	    float w = pow(c, 2.0);                                                                             ","		gl_FragColor.rgb = gl_FragColor.rgb * w;                                                                                 ","		gl_FragColor.a = w;                                                                                 ","	#endif                                                                                 ","	                                                                                 ","	                                                                                 ","	                                                                                 ","}                                                                                  "],THREE.FirstPersonControls=function(e,t){function o(e){l.enabled!==!1&&(e.preventDefault(),0===e.button?(P=b.ROTATE,c.set(e.clientX,e.clientY)):2===e.button&&(P=b.PAN,u.set(e.clientX,e.clientY)),l.domElement.addEventListener("mousemove",i,!1),l.domElement.addEventListener("mouseup",r,!1),l.dispatchEvent(R))
}function i(e){if(l.enabled!==!1){e.preventDefault();var t=l.domElement===document?l.domElement.body:l.domElement;P===b.ROTATE?(d.set(e.clientX,e.clientY),h.subVectors(d,c),l.rotateLeft(2*Math.PI*h.x/t.clientWidth*l.rotateSpeed),l.rotateUp(2*Math.PI*h.y/t.clientHeight*l.rotateSpeed),c.copy(d)):P===b.PAN&&(p.set(e.clientX,e.clientY),m.subVectors(p,u),m.multiplyScalar(5e-4).multiplyScalar(l.moveSpeed),l.pan(m.x,m.y),u.copy(p))}}function r(){l.enabled!==!1&&(l.domElement.removeEventListener("mousemove",i,!1),l.domElement.removeEventListener("mouseup",r,!1),l.dispatchEvent(w),P=b.NONE)}function n(e){if(l.enabled!==!1&&l.noZoom!==!0){e.preventDefault();var t=e.detail<0||e.wheelDelta>0?1:-1;l.moveSpeed+=.1*l.moveSpeed*t,l.moveSpeed=Math.max(.1,l.moveSpeed),l.dispatchEvent(R),l.dispatchEvent(w)}}function s(e){if(l.enabled!==!1)switch(e.keyCode){case l.keys.UP:l.moveForward=!0;break;case l.keys.BOTTOM:l.moveBackward=!0;break;case l.keys.LEFT:l.moveLeft=!0;break;case l.keys.RIGHT:l.moveRight=!0;break;case l.keys.W:l.moveForward=!0;break;case l.keys.S:l.moveBackward=!0;break;case l.keys.A:l.moveLeft=!0;break;case l.keys.D:l.moveRight=!0}}function a(e){switch(e.keyCode){case l.keys.W:l.moveForward=!1;break;case l.keys.S:l.moveBackward=!1;break;case l.keys.A:l.moveLeft=!1;break;case l.keys.D:l.moveRight=!1;break;case l.keys.UP:l.moveForward=!1;break;case l.keys.BOTTOM:l.moveBackward=!1;break;case l.keys.LEFT:l.moveLeft=!1;break;case l.keys.RIGHT:l.moveRight=!1}}this.object=e,this.domElement=void 0!==t?t:document,this.enabled=!0,this.rotateSpeed=1,this.moveSpeed=10,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40,A:"A".charCodeAt(0),S:"S".charCodeAt(0),D:"D".charCodeAt(0),W:"W".charCodeAt(0)};var l=this,c=new THREE.Vector2,d=new THREE.Vector2,h=new THREE.Vector2,u=new THREE.Vector2,p=new THREE.Vector2,m=new THREE.Vector2,v=new THREE.Vector3,f=(new THREE.Vector3,0),E=0,y=1,g=new THREE.Vector3,T=new THREE.Vector3,b={NONE:-1,ROTATE:0,SPEEDCHANGE:1,PAN:2},P=b.NONE;this.position0=this.object.position.clone();var x={type:"change"},R={type:"start"},w={type:"end"};this.rotateLeft=function(e){E-=e},this.rotateUp=function(e){f-=e},this.panLeft=function(e){var t=this.object.matrix.elements;v.set(t[0],t[1],t[2]),v.multiplyScalar(-e),g.add(v)},this.panUp=function(e){var t=this.object.matrix.elements;v.set(t[4],t[5],t[6]),v.multiplyScalar(e),g.add(v)},this.panForward=function(e){var t=this.object.matrix.elements;v.set(t[8],t[9],t[10]),v.multiplyScalar(e),g.add(v)},this.pan=function(e,t){var o=l.domElement===document?l.domElement.body:l.domElement;if(void 0!==l.object.fov){var i=l.object.position,r=i.clone(),n=r.length();n*=Math.tan(l.object.fov/2*Math.PI/180),l.panLeft(2*e*n/o.clientHeight),l.panUp(2*t*n/o.clientHeight)}else void 0!==l.object.top?(l.panLeft(e*(l.object.right-l.object.left)/o.clientWidth),l.panUp(t*(l.object.top-l.object.bottom)/o.clientHeight)):console.warn("WARNING: FirstPersonControls.js encountered an unknown camera type - pan disabled.")},this.update=function(e){this.object.rotation.order="ZYX";var t=this.object.position;if(void 0!==e&&(this.moveRight&&this.panLeft(-e*this.moveSpeed),this.moveLeft&&this.panLeft(e*this.moveSpeed),this.moveForward&&this.panForward(-e*this.moveSpeed),this.moveBackward&&this.panForward(e*this.moveSpeed)),!g.equals(new THREE.Vector3(0,0,0))){var o={type:"move",translation:g.clone()};this.dispatchEvent(o)}if(t.add(g),0!==E||0!==f){var o={type:"rotate",thetaDelta:E,phiDelta:f};this.dispatchEvent(o)}this.object.updateMatrix();var i=(new THREE.Matrix4).makeRotationY(E),r=(new THREE.Matrix4).multiplyMatrices(i,this.object.matrix);this.object.quaternion.setFromRotationMatrix(r),this.object.rotation.x+=f,E=0,f=0,y=1,g.set(0,0,0),T.distanceTo(this.object.position)>0&&(this.dispatchEvent(x),T.copy(this.object.position))},this.reset=function(){P=b.NONE,this.object.position.copy(this.position0)},this.domElement.addEventListener("contextmenu",function(e){e.preventDefault()},!1),this.domElement.addEventListener("mousedown",o,!1),this.domElement.addEventListener("mousewheel",n,!1),this.domElement.addEventListener("DOMMouseScroll",n,!1),window.addEventListener("keydown",s,!1),window.addEventListener("keyup",a,!1)},THREE.FirstPersonControls.prototype=Object.create(THREE.EventDispatcher.prototype),LRU.prototype.size=function(){return this.elements},LRU.prototype.contains=function(e){return null==this.items[e.id]},LRU.prototype.touch=function(e){var t;null==this.items[e.id]?(t=new LRUItem(e),t.previous=this.last,this.last=t,null!==t.previous&&(t.previous.next=t),this.items[e.id]=t,this.elements++,null===this.first&&(this.first=t),this.numPoints+=e.numPoints):(t=this.items[e.id],null===t.previous?null!==t.next&&(this.first=t.next,this.first.previous=null,t.previous=this.last,t.next=null,this.last=t,t.previous.next=t):null===t.next||(t.previous.next=t.next,t.next.previous=t.previous,t.previous=this.last,t.next=null,this.last=t,t.previous.next=t))},LRU.prototype.remove=function(){if(null===this.first)return null;var e=this.first;return null!==e.next?(this.first=e.next,this.first.previous=null):(this.first=null,this.last=null),delete this.items[e.node.id],this.elements--,this.numPoints-=e.node.numPoints,e.node},LRU.prototype.getLRUItem=function(){if(null===this.first)return null;var e=this.first;return e.node},LRU.prototype.toString=function(){for(var e="{ ",t=this.first;null!==t;)e+=t.node.id,null!==t.next&&(e+=", "),t=t.next;return e+="}",e+="("+this.size()+")"},Potree.PointCloudOctreeProxyNode=function(e){THREE.Object3D.call(this),this.geometryNode=e,this.boundingBox=e.boundingBox,this.boundingSphere=this.boundingBox.getBoundingSphere(),this.name=e.name,this.level=e.level,this.numPoints=e.numPoints},Potree.PointCloudOctreeProxyNode.prototype=Object.create(THREE.Object3D.prototype),Potree.ProfileRequest=function(e,t,o,i,r){this.start=e,this.end=t,this.width=o,this.depth=i,this.callback=r,this.loadQueue=[];var n=((new THREE.Vector3).addVectors(t,e).multiplyScalar(.5),(new THREE.Vector3).subVectors(t,e).length(),(new THREE.Vector3).subVectors(t,e).normalize()),s=new THREE.Vector3(0,1,0),a=(new THREE.Vector3).crossVectors(n,s).normalize(),l=a;this.plane=(new THREE.Plane).setFromNormalAndCoplanarPoint(l,e)},Potree.PointCloudOctree=function(e,t){THREE.Object3D.call(this),Potree.PointCloudOctree.lru=Potree.PointCloudOctree.lru||new LRU,this.pcoGeometry=e,this.boundingBox=this.pcoGeometry.tightBoundingBox,this.boundingSphere=this.boundingBox.getBoundingSphere(),this.material=t||new Potree.PointCloudMaterial,this.visiblePointsTarget=2e6,this.level=0,this.position.sub(e.offset),this.updateMatrix(),this.LODDistance=20,this.LODFalloff=1.3,this.LOD=4,this.showBoundingBox=!1,this.boundingBoxNodes=[],this.loadQueue=[],this.visibleBounds=new THREE.Box3,this.profileRequests=[],this.visibleNodes=[],this.visibleGeometry=[],this.pickTarget,this.pickMaterial,this.maxLevel=0;var o=new Potree.PointCloudOctreeProxyNode(this.pcoGeometry.root);this.add(o)},Potree.PointCloudOctree.prototype=Object.create(THREE.Object3D.prototype),Potree.PointCloudOctree.prototype.update=function(e,t){this.updateMatrixWorld(!0),this.visibleGeometry=this.getVisibleGeometry(e);for(var o=[],i=0;i<this.visibleGeometry.length;i++)o.push(this.visibleGeometry[i].node.name);for(var i=0;i<this.profileRequests.length;i++){var r=this.profileRequests[i];r.loadQueue=[]}for(var i=0;i<this.boundingBoxNodes.length;i++)this.boundingBoxNodes[i].visible=!1;this.loadQueue=[],this.visibleNodes=[],this.numVisibleNodes=0,this.numVisiblePoints=0,this.material.fov=e.fov*(Math.PI/180),this.material.screenWidth=t.domElement.clientWidth,this.material.screenHeight=t.domElement.clientHeight,this.material.spacing=this.pcoGeometry.spacing,this.material.near=e.near,this.material.far=e.far,this.hideDescendants(this.children[0]);var n=[];for(n.push({node:this.children[0],weight:1});n.length>0;){{var s=n.shift(),a=s.node;s.weight}if(a.visible=!0,a.matrixWorld.multiplyMatrices(a.parent.matrixWorld,a.matrix),a instanceof Potree.PointCloudOctreeProxyNode){var l=a.geometryNode;l.loaded===!0?this.replaceProxy(a):this.loadQueue.push(s)}else if(a instanceof THREE.PointCloud){if(this.numVisibleNodes++,this.numVisiblePoints+=a.numPoints,a.material=this.material,this.visibleNodes.push(s),a.level&&(this.maxLevel=Math.max(a.level,this.maxLevel)),this.showBoundingBox&&!a.boundingBoxNode){var c=new THREE.BoxHelper(a);scene.add(c),this.boundingBoxNodes.push(c),a.boundingBoxNode=c}else this.showBoundingBox?(a.boundingBoxNode.visible=!0,a.boundingBoxNode.matrixWorld.multiplyMatrices(a.parent.matrixWorld,a.boundingBoxNode.matrix)):!this.showBoundingBox&&a.boundingBoxNode&&(a.boundingBoxNode.visible=!1);for(var i=0;i<a.children.length;i++){var d=a.children[i],h=o.indexOf(d.name)>=0;if(h)for(var u=0;u<this.visibleGeometry.length;u++)if(this.visibleGeometry[u].node.name===d.name){n.push({node:d,weight:this.visibleGeometry[u].weight});break}}}}this.material.octreeLevels=this.maxLevel;for(var i=0;i<this.profileRequests.length;i++){var r=this.profileRequests[i],p=r.plane,m=(r.start,r.end,r.depth),n=[];for(n.push(this);n.length>0;){var v=n.shift();if(v instanceof Potree.PointCloudOctreeProxyNode){var f=Potree.utils.computeTransformedBoundingBox(v.boundingBox,v.matrixWorld),E=f.getBoundingSphere();Math.abs(p.distanceToPoint(E.center))<E.radius&&r.loadQueue.push(v)}if(v.level<m)for(var i=0;i<v.children.length;i++){var d=v.children[i];(d instanceof Potree.PointCloudOctreeProxyNode||d instanceof THREE.PointCloud)&&n.push(v.children[i])}}}for(var y=[],i=0;i<this.visibleNodes.length;i++){for(var s=this.visibleNodes[i],a=s.node,g=!0,u=0;u<a.children.length;u++){var d=a.children[u];d instanceof THREE.PointCloud&&(g=g&&!d.visible)}g&&y.push(a)}this.visibleBounds.min=new THREE.Vector3(1/0,1/0,1/0),this.visibleBounds.max=new THREE.Vector3(-1/0,-1/0,-1/0);for(var i=0;i<y.length;i++){var a=y[i];this.visibleBounds.expandByPoint(a.boundingBox.min),this.visibleBounds.expandByPoint(a.boundingBox.max)}for(var T=[],i=0;i<this.profileRequests.length;i++){var b=this.profileRequests[i];if(b.loadQueue.length>0){var v=b.loadQueue[0],l=v.geometryNode;if(l.loaded===!0&&void 0!==v.parent){var a=this.replaceProxy(v);a.updateMatrixWorld(),a.matrixWorld.multiplyMatrices(a.parent.matrixWorld,a.matrix)}else v.geometryNode.load()}else{var P=this.getProfile(b.start,b.end,b.width,b.depth);b.callback({type:"finished",points:P}),T.push(b)}}for(var i=0;i<T.length;i++){var x=this.profileRequests.indexOf(T[i]);x>-1&&this.profileRequests.splice(x,1)}if(this.loadQueue.length>0){this.loadQueue.length>=2&&this.loadQueue.sort(function(e,t){return t.weight-e.weight});for(var i=0;i<Math.min(5,this.loadQueue.length);i++)this.loadQueue[i].node.geometryNode.load()}this.hideDescendants(this.children[0]);for(var i=0;i<this.visibleNodes.length;i++)this.visibleNodes[i].node.visible=!0;this.material.pointSizeType&&(this.material.pointSizeType===Potree.PointSizeType.ADAPTIVE||this.material.pointColorType===Potree.PointColorType.OCTREE_DEPTH)&&this.updateVisibilityTexture()},Potree.PointCloudOctree.prototype.getVisibleGeometry=function(e){var t=[],o=this.pcoGeometry;e.updateMatrixWorld();var i=new THREE.Frustum,r=e.matrixWorldInverse,n=this.matrixWorld,s=e.projectionMatrix,a=(new THREE.Matrix4).multiply(s).multiply(r).multiply(n);i.setFromMatrix(a);var l=e.matrixWorld,c=(new THREE.Matrix4).getInverse(n),d=(new THREE.Matrix4).multiply(c).multiply(l),h=(new THREE.Vector3).setFromMatrixPosition(d),u=o.root,p=[],m=0,v=u.boundingBox.getBoundingSphere(),f=v.center.distanceTo(h),E=1/Math.max(.1,v.center.distanceTo(h)-v.radius);p.push({node:u,weight:E});for(var y=0;p.length>0;){y++;var g=p.shift(),T=g.node,b=T.boundingBox,v=T.boundingSphere,P=i.intersectsBox(b),x=P;if(x){if(m+T.numPoints>this.visiblePointsTarget)break;m+=T.numPoints,t.push(g);for(var R in T.children){var w=T.children[R],v=w.boundingSphere,f=v.center.distanceTo(h),H=v.radius,E=v.radius/f,C=e.fov/2*Math.PI/180,M=1/Math.tan(C)*H/Math.sqrt(f*f-H*H);if(!(.1>M))if(E=M,0>f-H&&(E=Number.MAX_VALUE),0===p.length)p.push({node:w,weight:E});else{for(var S=0,L=0;L<p.length;L++){if(E>p[L].weight){var S=L;break}if(L==p.length-1){S=p.length;break}}p.splice(S,0,{node:w,weight:E})}}}}return t},Potree.PointCloudOctree.prototype.updateVisibilityTexture=function(){if(this.material){for(var e=this.material.visibleNodesTexture,t=e.image.data,o=[],i=0;i<this.visibleNodes.length;i++)o.push(this.visibleNodes[i].node);var r=function(e,t){var o=e.name,i=t.name;return o.length!=i.length?o.length-i.length:i>o?-1:o>i?1:0};o.sort(r);for(var i=0;i<o.length;i++){for(var n=o[i],s=[],a=0;a<n.children.length;a++){var l=n.children[a];l instanceof THREE.PointCloud&&l.visible&&s.push(l)}s.sort(function(e,t){return e.name<t.name?-1:e.name>t.name?1:0}),t[3*i+0]=0,t[3*i+1]=0,t[3*i+2]=0;for(var a=0;a<s.length;a++){var l=s[a],c=parseInt(l.name.substr(-1));if(t[3*i+0]+=Math.pow(2,c),0===a){var d=o.indexOf(l);t[3*i+1]=d-i}}}this.material.uniforms.nodeSize.value=this.pcoGeometry.boundingBox.size().x,e.needsUpdate=!0}},Potree.PointCloudOctree.prototype.nodesOnRay=function(e,t){for(var o=[],i=t.clone(),r=0;r<e.length;r++){var n=e[r].node,s=((new THREE.Matrix4).getInverse(n.matrixWorld),n.boundingSphere.clone().applyMatrix4(n.matrixWorld));i.isIntersectionSphere(s)&&o.push(e[r])}return o},Potree.PointCloudOctree.prototype.updateMatrixWorld=function(e){this.matrixAutoUpdate===!0&&this.updateMatrix(),(this.matrixWorldNeedsUpdate===!0||e===!0)&&(void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0)},Potree.PointCloudOctree.prototype.replaceProxy=function(e){var t=e.geometryNode;if(t.loaded===!0){var o=t.geometry,i=new THREE.PointCloud(o,this.material);i.name=e.name,i.level=e.level,i.numPoints=e.numPoints,i.boundingBox=o.boundingBox,i.boundingSphere=i.boundingBox.getBoundingSphere(),i.pcoGeometry=t;var r=e.parent;r.remove(e),r.add(i),i.matrixWorld.multiplyMatrices(i.parent.matrixWorld,i.matrix);for(var n=0;8>n;n++)if(void 0!==t.children[n]){var s=t.children[n],a=new Potree.PointCloudOctreeProxyNode(s);i.add(a)}return i}},Potree.PointCloudOctree.prototype.hideDescendants=function(e){for(var t=[],o=0;o<e.children.length;o++){var i=e.children[o];i.visible&&t.push(i)}for(;t.length>0;){var e=t.shift();e.visible=!1;for(var o=0;o<e.children.length;o++){var i=e.children[o];i.visible&&t.push(i)}}},Potree.PointCloudOctree.prototype.moveToOrigin=function(){this.position.set(0,0,0),this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld,o=Potree.utils.computeTransformedBoundingBox(e,t);this.position.set(0,0,0).sub(o.center())},Potree.PointCloudOctree.prototype.moveToGroundPlane=function(){this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld,o=Potree.utils.computeTransformedBoundingBox(e,t);this.position.y+=-o.min.y},Potree.PointCloudOctree.prototype.getBoundingBoxWorld=function(){this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld,o=Potree.utils.computeTransformedBoundingBox(e,t);return o},Potree.PointCloudOctree.prototype.getPointsInProfile=function(e,t){for(var o=[],i=0;i<e.points.length-1;i++)for(var r=e.points[i],n=e.points[i+1],s=this.getProfile(r,n,e.width,t),a=0;a<s.length;a++)o.push(s[a]);return o},Potree.PointCloudOctree.prototype.getProfile=function(e,t,o,i,r){if(void 0===r){var n=[];n.push(this);for(var s=(new THREE.Vector3).addVectors(t,e).multiplyScalar(.5),a=(new THREE.Vector3).subVectors(t,e).length(),l=(new THREE.Vector3).subVectors(t,e).normalize(),c=new THREE.Vector3(0,1,0),d=(new THREE.Vector3).crossVectors(l,c).normalize(),h=d,u=(new THREE.Plane).setFromNormalAndCoplanarPoint(h,e),p=(new THREE.Plane).setFromNormalAndCoplanarPoint(l,s),m=[];n.length>0;){var v=n.shift(),f=0;if(v instanceof THREE.PointCloud)for(var E=v.geometry,y=E.attributes.position,g=y.array,T=y.length/y.itemSize,b=0;T>b;b++){var P=new THREE.Vector3(g[3*b],g[3*b+1],g[3*b+2]);P.applyMatrix4(this.matrixWorld);var x=Math.abs(u.distanceToPoint(P)),R=Math.abs(p.distanceToPoint(P));o/2>x&&a/2>R&&(m.push(P),f++)}if(v==this||v.level<i)for(var b=0;b<v.children.length;b++){var w=v.children[b];if(w instanceof THREE.PointCloud){var H=w.boundingSphere.clone().applyMatrix4(w.matrixWorld);u.distanceToSphere(H)<H.radius&&n.push(w)}}}return m}this.profileRequests.push(new Potree.ProfileRequest(e,t,o,i,r))},Potree.PointCloudOctree.disposeLeastRecentlyUsed=function(e){var t=0;do{var o=this.lru.first.node,i=o.parent,r=(o.geometry,o.pcoGeometry),n=new Potree.PointCloudOctreeProxyNode(r),s=Potree.PointCloudOctree.disposeNode(o);if(t+=s.freed,i.add(n),0==s.numDeletedNodes)break}while(e>t)},Potree.PointCloudOctree.disposeNode=function(e){var t=0,o=0,i=[];e.traverse(function(e){i.push(e)});for(var r=0;r<i.length;r++){var n=i[r];n instanceof THREE.PointCloud&&(t+=n.pcoGeometry.numPoints,n.pcoGeometry.dispose(),n.geometry.dispose(),Potree.PointCloudOctree.lru.remove(n),o++)}return Potree.PointCloudOctree.lru.remove(e),e.parent.remove(e),{freed:t,numDeletedNodes:o}},Potree.PointCloudOctree.prototype.getVisibleExtent=function(){return this.visibleBounds.applyMatrix4(this.matrixWorld)};var point=Potree.PointCloudOctree.prototype.pick=function(e,t,o,i){var i=i||{},r=i.accuracy||.5,n=this.nodesOnRay(this.visibleNodes,o);if(0===n.length)return null;var s=Math.ceil(e.domElement.clientWidth*r),a=Math.ceil(e.domElement.clientHeight*r);this.pickTarget||(this.pickTarget=new THREE.WebGLRenderTarget(1,1,{minFilter:THREE.LinearFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat})),this.pickMaterial||(this.pickMaterial=new Potree.PointCloudMaterial,this.pickMaterial.pointColorType=Potree.PointColorType.POINT_INDEX,this.pickMaterial.pointSizeType=Potree.PointSizeType.FIXED,this.pickMaterial.size=5*r),this.pickTarget.setSize(s,a);var l=e.context,c=this.pickMaterial;e.setRenderTarget(this.pickTarget),e.setDepthTest(c.depthTest),e.setDepthWrite(c.depthWrite),e.setBlending(THREE.NoBlending),e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil);for(var d=0;d<n.length;d++){var h=n[d].node,u=h.geometry;if(u.attributes.indices.buffer){if(c.pcIndex=d,c.program){var p=c.program.program;l.useProgram(p);var m=l.getAttribLocation(p,"indices"),v=4;l.bindBuffer(l.ARRAY_BUFFER,u.attributes.indices.buffer),l.enableVertexAttribArray(m),l.vertexAttribPointer(m,v,l.UNSIGNED_BYTE,!0,0,0),l.uniform1f(c.program.uniforms.pcIndex,c.pcIndex)}e.renderBufferDirect(t,[],null,c,u,h)}}var f=(new THREE.Vector3).addVectors(t.position,o.direction).project(t);f.addScalar(1).multiplyScalar(.5);var E=new ArrayBuffer(4),y=new Uint8Array(E),g=new Uint32Array(E);e.context.readPixels(f.x*s,f.y*a,1,1,e.context.RGBA,e.context.UNSIGNED_BYTE,y);var T=y[3];y[3]=0;var b=g[0],P=n[T].node,x=P.geometry.attributes.position.array,R=x[3*b+0],w=x[3*b+1],H=x[3*b+2],C=new THREE.Vector3(R,w,H);return C.applyMatrix4(this.matrixWorld),0===b&&0===T?null:{position:C}},nodesLoadTimes={};Potree.PointCloudOctreeGeometry=function(){Potree.PointCloudOctree.lru=Potree.PointCloudOctree.lru||new LRU,this.url=null,this.octreeDir=null,this.spacing=0,this.boundingBox=null,this.root=null,this.numNodesLoading=0,this.nodes=null,this.pointAttributes=null},Potree.PointCloudOctreeGeometryNode=function(e,t,o){this.name=e,this.index=parseInt(e.charAt(e.length-1)),this.pcoGeometry=t,this.boundingBox=o,this.boundingSphere=o.getBoundingSphere(),this.children={},this.numPoints=0,this.level=null},Potree.PointCloudOctreeGeometryNode.prototype.addChild=function(e){this.children[e.index]=e,e.parent=this},Potree.PointCloudOctreeGeometryNode.prototype.load=function(){this.loading===!0||this.pcoGeometry.numNodesLoading>1||(this.loading=!0,Potree.PointCloudOctree.lru.numPoints+this.numPoints>=Potree.pointLoadLimit&&Potree.PointCloudOctree.disposeLeastRecentlyUsed(this.numPoints),this.pcoGeometry.numNodesLoading++,this.pcoGeometry.loader.load(this))},Potree.BinaryNodeLoader=function(){},Potree.BinaryNodeLoader.load=function(e,t,o){var i=e.pcoGeometry.octreeDir+"/"+e.name;void 0!==t&&t.length>0&&(i+="."+t);var r=new XMLHttpRequest;r.open("GET",i,!0),r.responseType="arraybuffer",r.overrideMimeType("text/plain; charset=x-user-defined"),r.onreadystatechange=function(){if(4===r.readyState)if(200===r.status||0===r.status){var t=r.response;o(e,t)}else console.log("Failed to load file! HTTP status: "+r.status+", file: "+i)};try{r.send(null)}catch(n){console.log("fehler beim laden der punktwolke: "+n)}},Potree.PointCloudOctreeGeometryNode.prototype.dispose=function(){delete this.geometry,this.loaded=!1},Potree.utils=function(){},Potree.utils.pathExists=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),200!==t.status?!1:!0},Potree.utils.computeTransformedBoundingBox=function(e,t){var o=[new THREE.Vector3(e.min.x,e.min.y,e.min.z).applyMatrix4(t),new THREE.Vector3(e.min.x,e.min.y,e.min.z).applyMatrix4(t),new THREE.Vector3(e.max.x,e.min.y,e.min.z).applyMatrix4(t),new THREE.Vector3(e.min.x,e.max.y,e.min.z).applyMatrix4(t),new THREE.Vector3(e.min.x,e.min.y,e.max.z).applyMatrix4(t),new THREE.Vector3(e.min.x,e.max.y,e.max.z).applyMatrix4(t),new THREE.Vector3(e.max.x,e.max.y,e.min.z).applyMatrix4(t),new THREE.Vector3(e.max.x,e.min.y,e.max.z).applyMatrix4(t),new THREE.Vector3(e.max.x,e.max.y,e.max.z).applyMatrix4(t)],i=new THREE.Box3;return i.setFromPoints(o),i},Potree.utils.addCommas=function(e){e+="",x=e.split("."),x1=x[0],x2=x.length>1?"."+x[1]:"";for(var t=/(\d+)(\d{3})/;t.test(x1);)x1=x1.replace(t,"$1,$2");return x1+x2},Potree.utils.createWorker=function(e){var t=new Blob([e],{type:"application/javascript"}),o=new Worker(URL.createObjectURL(t));return o},Potree.utils.loadSkybox=function(e){var t=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1e5),o=new THREE.Scene,i=".jpg",r=[e+"px"+i,e+"nx"+i,e+"py"+i,e+"ny"+i,e+"pz"+i,e+"nz"+i],n=THREE.ImageUtils.loadTextureCube(r,new THREE.CubeRefractionMapping),s=new THREE.MeshBasicMaterial({color:16777215,envMap:n,refractionRatio:.95}),a=THREE.ShaderLib.cube;a.uniforms.tCube.value=n;var s=new THREE.ShaderMaterial({fragmentShader:a.fragmentShader,vertexShader:a.vertexShader,uniforms:a.uniforms,depthWrite:!1,side:THREE.BackSide}),l=new THREE.Mesh(new THREE.BoxGeometry(100,100,100),s);return o.add(l),{camera:t,scene:o}},Potree.utils.createGrid=function(e,t,o,i){for(var r=new THREE.LineBasicMaterial({color:i||8947848}),n=new THREE.Geometry,s=0;t>=s;s++)n.vertices.push(new THREE.Vector3(-(o*e)/2,0,s*o-o*t/2)),n.vertices.push(new THREE.Vector3(+(o*e)/2,0,s*o-o*t/2));for(var s=0;e>=s;s++)n.vertices.push(new THREE.Vector3(s*o-o*e/2,0,-(o*t)/2)),n.vertices.push(new THREE.Vector3(s*o-o*e/2,0,+(o*t)/2));var a=new THREE.Line(n,r,THREE.LinePieces);return a.receiveShadow=!0,a},Potree.utils.createBackgroundTexture=function(e,t){function o(e,t){return 1/(2*Math.PI)*Math.exp(-(e*e+t*t)/2)}var i=THREE.ImageUtils.generateDataTexture(e,t,new THREE.Color);i.magFilter=THREE.NearestFilter;for(var r=i.image.data,n=[1,1.5,1.7],s=o(0,0),a=0;e>a;a++)for(var l=0;t>l;l++){var c=2*(a/e)-1,d=2*(l/t)-1,h=a+e*l,u=o(2*c,2*d)/s,p=(Math.random()+Math.random()+Math.random())/3;p=(.5*u+.5)*p*.03,p=.4*p,r[3*h+0]=255*(u/15+.05+p)*n[0],r[3*h+1]=255*(u/15+.05+p)*n[1],r[3*h+2]=255*(u/15+.05+p)*n[2]}return i},Potree.TextSprite=function(e){var t=new THREE.Texture,o=new THREE.SpriteMaterial({map:t,useScreenCoordinates:!1});THREE.Sprite.call(this,o),this.borderThickness=4,this.fontface="Arial",this.fontsize=28,this.borderColor={r:0,g:0,b:0,a:1},this.backgroundColor={r:255,g:255,b:255,a:1},this.text="",this.setText(e)},Potree.TextSprite.prototype=new THREE.Sprite,Potree.TextSprite.prototype.setText=function(e){this.text=e,this.update()},Potree.TextSprite.prototype.setBorderColor=function(e){this.borderColor=e,this.update()},Potree.TextSprite.prototype.setBackgroundColor=function(e){this.backgroundColor=e,this.update()},Potree.TextSprite.prototype.update=function(){var e=document.createElement("canvas"),t=e.getContext("2d");t.font="Bold "+this.fontsize+"px "+this.fontface;var o=t.measureText(this.text),i=o.width,r=i+2*this.borderThickness,n=1.4*this.fontsize+2*this.borderThickness,e=document.createElement("canvas"),t=e.getContext("2d");t.canvas.width=r,t.canvas.height=n,t.font="Bold "+this.fontsize+"px "+this.fontface,t.fillStyle="rgba("+this.backgroundColor.r+","+this.backgroundColor.g+","+this.backgroundColor.b+","+this.backgroundColor.a+")",t.strokeStyle="rgba("+this.borderColor.r+","+this.borderColor.g+","+this.borderColor.b+","+this.borderColor.a+")",t.lineWidth=this.borderThickness,this.roundRect(t,this.borderThickness/2,this.borderThickness/2,i+this.borderThickness,1.4*this.fontsize+this.borderThickness,6),t.strokeStyle="rgba(0, 0, 0, 1.0)",t.strokeText(this.text,this.borderThickness,this.fontsize+this.borderThickness),t.fillStyle="rgba(255, 255, 255, 1.0)",t.fillText(this.text,this.borderThickness,this.fontsize+this.borderThickness);var s=new THREE.Texture(e);s.needsUpdate=!0,this.material.map=s,this.scale.set(.01*r,.01*n,1)},Potree.TextSprite.prototype.roundRect=function(e,t,o,i,r,n){e.beginPath(),e.moveTo(t+n,o),e.lineTo(t+i-n,o),e.quadraticCurveTo(t+i,o,t+i,o+n),e.lineTo(t+i,o+r-n),e.quadraticCurveTo(t+i,o+r,t+i-n,o+r),e.lineTo(t+n,o+r),e.quadraticCurveTo(t,o+r,t,o+r-n),e.lineTo(t,o+n),e.quadraticCurveTo(t,o,t+n,o),e.closePath(),e.fill(),e.stroke()},Potree.Version=function(e){this.version=e;var t=-1===e.indexOf(".")?e.length:e.indexOf(".");this.versionMajor=e.substr(0,t),this.versionMinor=e.substr(t+1),0===this.versionMinor.length&&(this.versionMinor=0)},Potree.Version.prototype.newerThan=function(e){var t=new Potree.Version(e);return this.versionMajor>t.versionMajor?!0:this.versionMajor===t.versionMajor&&this.versionMinor>t.versionMinor?!0:!1},Potree.AreaTool=function(e,t,o){function i(e){this.points=[],this.spheres=[],this.edges=[],this.sphereLabels=[],this.edgeLabels=[],this.root=e,this.closed=!0,this.areaLabel=new Potree.TextSprite,this.areaLabel.setBorderColor({r:0,g:255,b:0,a:0}),this.areaLabel.setBackgroundColor({r:0,g:255,b:0,a:0}),this.areaLabel.material.depthTest=!1,this.areaLabel.material.opacity=1,e.add(this.areaLabel);var t=new THREE.SphereGeometry(.4,10,10),o=new THREE.Color(16711680),i=function(){var e=new THREE.MeshLambertMaterial({shading:THREE.SmoothShading,color:16711680,ambient:11184810,depthTest:!1,depthWrite:!1});return e};this.add=function(e){this.points.push(e);var r=new THREE.Mesh(t,i());r.addEventListener("mousemove",m),r.addEventListener("mouseleave",v),r.addEventListener("mousedrag",f),r.addEventListener("drop",E);var n=new THREE.Geometry;n.vertices.push(new THREE.Vector3,new THREE.Vector3),n.colors.push(o,o,o);var s=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,linewidth:2});s.depthTest=!1;var a=new THREE.Line(n,s),l=new Potree.TextSprite("abc");l.setBorderColor({r:0,g:255,b:0,a:0}),l.setBackgroundColor({r:0,g:255,b:0,a:0}),l.material.depthTest=!1,l.material.opacity=1,this.root.add(r),this.root.add(a),this.root.add(l),this.spheres.push(r),this.edges.push(a),this.edgeLabels.push(l),this.setPosition(this.points.length-1,e)},this.remove=function(e){this.points.splice(e,1),this.root.remove(this.spheres[e]),this.root.remove(this.edges[e]),this.root.remove(this.edgeLabels[e]),this.spheres.splice(e,1),this.edges.splice(e,1),this.edgeLabels.splice(e,1),this.update()},this.getArea=function(){for(var e=0,t=this.points.length-1,o=0;o<this.points.length;o++){var i=this.points[o],r=this.points[t];e+=(r.x+i.x)*(i.z-r.z),t=o}return Math.abs(e/2)},this.setPosition=function(e,t){var o=this.points[e];o.copy(t),this.update()},this.setClosed=function(e){this.closed=e,this.update()},this.update=function(){if(this.areaLabel.visible=this.points.length>=3,1===this.points.length){var e=this.points[0];return this.spheres[0].position.copy(e),this.edges[0].visible=!1,void(this.edgeLabels[0].visible=!1)}for(var t=new THREE.Vector3,o=this.points.length-1,i=0;o>=i;i++){var e=this.points[i],r=this.spheres[i],n=0===i?o:i-1,s=i===o?0:i+1,a=this.points[n],l=this.points[s],c=this.edges[n],d=this.edges[i],h=this.edgeLabels[n],u=this.edgeLabels[i],p=e.distanceTo(a),m=e.distanceTo(l),v=(new THREE.Vector3).addVectors(a,e).multiplyScalar(.5),f=(new THREE.Vector3).addVectors(e,l).multiplyScalar(.5);h.position.copy(v),u.position.copy(f),h.setText(p.toFixed(2)),u.setText(m.toFixed(2)),r.position.copy(e),c.geometry.vertices[1].copy(e),c.geometry.verticesNeedUpdate=!0,c.geometry.computeBoundingSphere(),d.geometry.vertices[0].copy(e),d.geometry.verticesNeedUpdate=!0,d.geometry.computeBoundingSphere(),i!==o||this.closed?(d.visible=!0,u.visible=!0):(d.visible=!1,u.visible=!1),t.add(e)}t.multiplyScalar(1/this.points.length);var E=Potree.utils.addCommas(this.getArea().toFixed(1))+"²";this.areaLabel.setText(E),this.areaLabel.position.copy(t)}}function r(e){if(h.enabled){var t=d();if(t){var o=t.clone();p===u.DEFAULT&&(p=u.PICKING,h.activeMeasurement=new i),h.activeMeasurement.add(o);var e={type:"newpoint",position:o.clone()};h.dispatchEvent(e)}}}function n(e){if(h.mouse.x=e.clientX/h.domElement.clientWidth*2-1,h.mouse.y=2*-(e.clientY/h.domElement.clientHeight)+1,h.dragstart)h.dragstart.object.dispatchEvent({type:"mousedrag",event:e});else if(p==u.PICKING&&h.activeMeasurement){var t=d();if(t){var o=h.activeMeasurement.points.length-1;h.activeMeasurement.setPosition(o,t)}}else{var t=c();t?(t.object.dispatchEvent({type:"mousemove",target:t.object,event:e}),h.hoveredElement&&h.hoveredElement!==t.object&&h.hoveredElement.dispatchEvent({type:"mouseleave",target:h.hoveredElement,event:e}),h.hoveredElement=t.object):(h.hoveredElement&&h.hoveredElement.dispatchEvent({type:"mouseleave",target:h.hoveredElement,event:e}),h.hoveredElement=null)}}function s(){p==u.PICKING&&(h.activeMeasurement.remove(h.activeMeasurement.points.length-1),h.measurements.push(h.activeMeasurement),h.activeMeasurement=void 0,p=u.DEFAULT,h.setEnabled(!1))}function a(e){if(1===e.which){var t=c();t&&(h.dragstart={object:t.object,sceneClickPos:t.point,sceneStartPos:h.sceneRoot.position.clone(),mousePos:{x:h.mouse.x,y:h.mouse.y}})}else 3===e.which&&s(e)}function l(e){h.dragstart&&(h.dragstart.object.dispatchEvent({type:"drop",event:e}),h.dragstart=null)}function c(){var e=new THREE.Vector3(h.mouse.x,h.mouse.y,.5);e.unproject(h.camera);var t=new THREE.Raycaster;t.ray.set(h.camera.position,e.sub(h.camera.position).normalize());for(var o=[],i=0;i<h.measurements.length;i++)for(var r=h.measurements[i],n=0;n<r.spheres.length;n++)o.push(r.spheres[n]);var s=t.intersectObjects(o,!0);return s.length>0?s[0]:!1}function d(){var e=new THREE.Vector3(h.mouse.x,h.mouse.y,.5);e.unproject(h.camera);var t=e.sub(h.camera.position).normalize(),o=new THREE.Ray(h.camera.position,t),i=[];h.scene.traverse(function(e){e instanceof Potree.PointCloudOctree&&i.push(e)});for(var r=null,n=null,s=0;s<i.length;s++){var a=i[s],l=a.pick(h.renderer,h.camera,o,{accuracy:h.accuracy});if(l){var c=h.camera.position.distanceTo(l.position);(!r||n>c)&&(r=l,n=c)}}return r?r.position:null}var h=this;this.enabled=!1,this.scene=e,this.camera=t,this.renderer=o,this.domElement=o.domElement,this.mouse={x:0,y:0},this.accuracy=.5;{var u={DEFAULT:0,PICKING:1},p=u.DEFAULT;new THREE.SphereGeometry(.4,10,10)}this.activeMeasurement,this.measurements=[],this.sceneMeasurement=new THREE.Scene,this.sceneRoot=new THREE.Object3D,this.sceneMeasurement.add(this.sceneRoot),this.light=new THREE.DirectionalLight(16777215,1),this.light.position.set(0,0,10),this.light.lookAt(new THREE.Vector3(0,0,0)),this.sceneMeasurement.add(this.light),this.hoveredElement=null;var m=function(e){e.target.material.emissive.setHex(8947848)},v=function(e){e.target.material.emissive.setHex(0)},f=function(e){var t=d();if(t)for(var o=0;o<h.measurements.length;o++){var i=h.measurements[o],r=i.spheres.indexOf(h.dragstart.object);if(r>=0){h.measurements[o].setPosition(r,t);break}}e.event.stopImmediatePropagation()},E=function(){};this.setEnabled=function(e){this.enabled!==e&&(this.enabled=e,e&&(p=u.PICKING,h.activeMeasurement=new i(h.sceneRoot),h.activeMeasurement.add(new THREE.Vector3(0,0,0))))
},this.update=function(){for(var e=[],o=0;o<this.measurements.length;o++)e.push(this.measurements[o]);this.activeMeasurement&&e.push(this.activeMeasurement);for(var o=0;o<e.length;o++){for(var i=e[o],r=0;r<i.spheres.length;r++){var n=i.spheres[r],s=n.getWorldPosition().applyMatrix4(this.camera.matrixWorldInverse),a=(new THREE.Vector4(s.x,s.y,s.z).applyMatrix4(t.projectionMatrix),Math.abs(s.z/60));n.scale.set(a,a,a)}for(var r=0;r<i.edgeLabels.length;r++){var l=i.edgeLabels[r],s=l.getWorldPosition().applyMatrix4(this.camera.matrixWorldInverse),a=Math.abs(s.z/10),c=l.scale.length();l.scale.multiplyScalar(a/c)}var s=i.areaLabel.getWorldPosition().applyMatrix4(this.camera.matrixWorldInverse),a=Math.abs(s.z/8),c=i.areaLabel.scale.length();i.areaLabel.scale.multiplyScalar(a/c)}this.light.position.copy(this.camera.position),this.light.lookAt(this.camera.getWorldDirection().add(this.camera.position))},this.render=function(){this.update(),o.render(this.sceneMeasurement,this.camera)},this.domElement.addEventListener("click",r,!1),this.domElement.addEventListener("mousemove",n,!1),this.domElement.addEventListener("mousedown",a,!1),this.domElement.addEventListener("mouseup",l,!0)},Potree.AreaTool.prototype=Object.create(THREE.EventDispatcher.prototype),Potree.MeasuringTool=function(e,t,o){function i(){this.points=[],this.spheres=[],this.edges=[],this.sphereLabels=[],this.edgeLabels=[]}function r(){var e=new THREE.MeshLambertMaterial({shading:THREE.SmoothShading,color:16711680,ambient:11184810,depthTest:!1,depthWrite:!1});return e}function n(e){if(u.enabled){var t=h();if(t){var o=t.clone(),n=new THREE.Mesh(v,r());n.position.copy(t),u.sceneRoot.add(n),n.addEventListener("mousemove",f),n.addEventListener("mouseleave",E),n.addEventListener("mousedrag",y),n.addEventListener("drop",g);var s=new THREE.Mesh(v,r());s.position.copy(t),u.sceneRoot.add(s),s.addEventListener("mousemove",f),s.addEventListener("mouseleave",E),s.addEventListener("mousedrag",y),s.addEventListener("drop",g);var a=o.x.toFixed(2)+" / "+o.y.toFixed(2)+" / "+o.z.toFixed(2),l=new Potree.TextSprite(a);l.setBorderColor({r:0,g:255,b:0,a:1}),l.material.depthTest=!1,l.material.opacity=0,l.position.copy(t),l.position.y+=.5;var c=new Potree.TextSprite(a);c.setBorderColor({r:0,g:255,b:0,a:1}),c.material.depthTest=!1,c.material.opacity=0,c.position.copy(t),c.position.y+=.5;var d=new THREE.Color(16711680),T=new THREE.Geometry;T.vertices.push(t.clone(),t.clone()),T.colors.push(d,d,d);var b=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,linewidth:10});b.depthTest=!1,sConnection=new THREE.Line(T,b);var P=new Potree.TextSprite(0);P.setBorderColor({r:0,g:255,b:0,a:0}),P.setBackgroundColor({r:0,g:255,b:0,a:0}),P.material.depthTest=!1,P.position.copy(t),P.position.y+=.5,u.sceneRoot.add(sConnection),u.sceneRoot.add(l),u.sceneRoot.add(c),u.sceneRoot.add(P),m===p.DEFAULT?(m=p.PICKING,u.activeMeasurement=new i,u.activeMeasurement.spheres.push(n)):m===p.PICKING&&u.sceneRoot.remove(n),u.activeMeasurement.points.push(t),u.activeMeasurement.spheres.push(s),u.activeMeasurement.sphereLabels.push(l),u.activeMeasurement.sphereLabels.push(c),u.activeMeasurement.edges.push(sConnection),u.activeMeasurement.edgeLabels.push(P);var e={type:"newpoint",position:o.clone()};u.dispatchEvent(e)}}}function s(e){if(u.mouse.x=e.clientX/u.domElement.clientWidth*2-1,u.mouse.y=2*-(e.clientY/u.domElement.clientHeight)+1,u.dragstart)u.dragstart.object.dispatchEvent({type:"mousedrag",event:e});else if(m==p.PICKING&&u.activeMeasurement){var t=h();if(t)if(1===u.activeMeasurement.spheres.length){var o=t.clone(),i=u.activeMeasurement.spheres[0];i.position.copy(t)}else{var o=t.clone(),r=u.activeMeasurement.spheres.length,i=u.activeMeasurement.spheres[r-1],n=u.activeMeasurement.sphereLabels[r-1],s=u.activeMeasurement.edges[r-2],a=u.activeMeasurement.edgeLabels[r-2],l=o.x.toFixed(2)+" / "+o.y.toFixed(2)+" / "+o.z.toFixed(2);n.setText(l),i.position.copy(t),n.position.copy(t),n.position.y+=.5,s.geometry.vertices[1].copy(t),s.geometry.verticesNeedUpdate=!0,s.geometry.computeBoundingSphere();var c=s.geometry.vertices[1].clone().add(s.geometry.vertices[0]).multiplyScalar(.5),v=s.geometry.vertices[0].distanceTo(s.geometry.vertices[1]).toFixed(2);a.position.copy(c),a.setText(v),a.scale.multiplyScalar(10)}}else{var t=d();t?(t.object.dispatchEvent({type:"mousemove",target:t.object,event:e}),u.hoveredElement&&u.hoveredElement!==t.object&&u.hoveredElement.dispatchEvent({type:"mouseleave",target:u.hoveredElement,event:e}),u.hoveredElement=t.object):(u.hoveredElement&&u.hoveredElement.dispatchEvent({type:"mouseleave",target:u.hoveredElement,event:e}),u.hoveredElement=null)}}function a(){if(m==p.PICKING){var e=u.activeMeasurement.spheres.pop(),t=u.activeMeasurement.edges.pop(),o=u.activeMeasurement.sphereLabels.pop(),i=u.activeMeasurement.edgeLabels.pop();u.sceneRoot.remove(e),u.sceneRoot.remove(t),u.sceneRoot.remove(o),u.sceneRoot.remove(i),u.measurements.push(u.activeMeasurement),u.activeMeasurement=void 0,m=p.DEFAULT,u.setEnabled(!1)}}function l(e){if(1===e.which){var t=d();t&&(u.dragstart={object:t.object,sceneClickPos:t.point,sceneStartPos:u.sceneRoot.position.clone(),mousePos:{x:u.mouse.x,y:u.mouse.y}},e.stopImmediatePropagation())}else 3===e.which&&a(e)}function c(e){u.dragstart&&(u.dragstart.object.dispatchEvent({type:"drop",event:e}),u.dragstart=null)}function d(){var e=new THREE.Vector3(u.mouse.x,u.mouse.y,.5);e.unproject(u.camera);var t=new THREE.Raycaster;t.ray.set(u.camera.position,e.sub(u.camera.position).normalize());for(var o=[],i=0;i<u.measurements.length;i++)for(var r=u.measurements[i],n=0;n<r.spheres.length;n++)o.push(r.spheres[n]);var s=t.intersectObjects(o,!0);return s.length>0?s[0]:!1}function h(){var e=new THREE.Vector3(u.mouse.x,u.mouse.y,.5);e.unproject(u.camera);var t=e.sub(u.camera.position).normalize(),o=new THREE.Ray(u.camera.position,t),i=[];u.scene.traverse(function(e){e instanceof Potree.PointCloudOctree&&i.push(e)});for(var r=null,n=null,s=0;s<i.length;s++){var a=i[s],l=a.pick(u.renderer,u.camera,o,{accuracy:u.accuracy});if(l){var c=u.camera.position.distanceTo(l.position);(!r||n>c)&&(r=l,n=c)}}return r?r.position:null}var u=this;this.enabled=!1,this.scene=e,this.camera=t,this.renderer=o,this.domElement=o.domElement,this.mouse={x:0,y:0},this.accuracy=.5;var p={DEFAULT:0,PICKING:1},m=p.DEFAULT,v=new THREE.SphereGeometry(.4,10,10);this.activeMeasurement,this.measurements=[],this.sceneMeasurement=new THREE.Scene,this.sceneRoot=new THREE.Object3D,this.sceneMeasurement.add(this.sceneRoot),this.light=new THREE.DirectionalLight(16777215,1),this.light.position.set(0,0,10),this.light.lookAt(new THREE.Vector3(0,0,0)),this.sceneMeasurement.add(this.light),this.hoveredElement=null;var f=function(e){e.target.material.emissive.setHex(8947848)},E=function(e){e.target.material.emissive.setHex(0)},y=function(e){var t=h();if(t)for(var o=0;o<u.measurements.length;o++){var i=u.measurements[o],r=i.spheres.indexOf(u.dragstart.object);if(r>=0){var n=i.spheres[r];if(0===r){var s=i.edges[r],a=i.edgeLabels[r];n.position.copy(t),s.geometry.vertices[0].copy(t),s.geometry.verticesNeedUpdate=!0,s.geometry.computeBoundingSphere();var l=s.geometry.vertices[0].clone().add(s.geometry.vertices[1]).multiplyScalar(.5),c=s.geometry.vertices[0].distanceTo(s.geometry.vertices[1]).toFixed(2);a.position.copy(l),a.setText(c),a.scale.multiplyScalar(10)}else if(r===i.spheres.length-1){var s=i.edges[r-1],a=i.edgeLabels[r-1];n.position.copy(t),s.geometry.vertices[1].copy(t),s.geometry.verticesNeedUpdate=!0,s.geometry.computeBoundingSphere();var l=s.geometry.vertices[0].clone().add(s.geometry.vertices[1]).multiplyScalar(.5),c=s.geometry.vertices[0].distanceTo(s.geometry.vertices[1]).toFixed(2);a.position.copy(l),a.setText(c),a.scale.multiplyScalar(10)}else{var d=i.edges[r-1],p=i.edges[r],m=i.edgeLabels[r-1],v=i.edgeLabels[r];n.position.copy(t),d.geometry.vertices[1].copy(t),d.geometry.verticesNeedUpdate=!0,d.geometry.computeBoundingSphere(),p.geometry.vertices[0].copy(t),p.geometry.verticesNeedUpdate=!0,p.geometry.computeBoundingSphere();var f=d.geometry.vertices[0].clone().add(d.geometry.vertices[1]).multiplyScalar(.5),E=d.geometry.vertices[0].distanceTo(d.geometry.vertices[1]).toFixed(2);m.position.copy(f),m.setText(E),m.scale.multiplyScalar(10);var y=p.geometry.vertices[0].clone().add(p.geometry.vertices[1]).multiplyScalar(.5),g=p.geometry.vertices[0].distanceTo(p.geometry.vertices[1]).toFixed(2);v.position.copy(y),v.setText(g),v.scale.multiplyScalar(10)}break}}e.event.stopImmediatePropagation()},g=function(){};this.setEnabled=function(e){if(this.enabled!==e&&(this.enabled=e,e)){m=p.PICKING,u.activeMeasurement=new i;var t=new THREE.Mesh(v,r());u.sceneRoot.add(t),u.activeMeasurement.spheres.push(t),t.addEventListener("mousemove",f),t.addEventListener("mouseleave",E),t.addEventListener("mousedrag",y),t.addEventListener("drop",g)}},this.update=function(){for(var e=[],o=0;o<this.measurements.length;o++)e.push(this.measurements[o]);this.activeMeasurement&&e.push(this.activeMeasurement);for(var o=0;o<e.length;o++){for(var i=e[o],r=0;r<i.spheres.length;r++){var n=i.spheres[r],s=n.getWorldPosition().applyMatrix4(this.camera.matrixWorldInverse),a=(new THREE.Vector4(s.x,s.y,s.z).applyMatrix4(t.projectionMatrix),Math.abs(s.z/60));n.scale.set(a,a,a)}for(var r=0;r<i.edgeLabels.length;r++){var l=i.edgeLabels[r],s=l.getWorldPosition().applyMatrix4(this.camera.matrixWorldInverse),a=Math.abs(s.z/10),c=l.scale.length();l.scale.multiplyScalar(a/c)}}this.light.position.copy(this.camera.position),this.light.lookAt(this.camera.getWorldDirection().add(this.camera.position))},this.render=function(){this.update(),o.render(this.sceneMeasurement,this.camera)},this.domElement.addEventListener("click",n,!1),this.domElement.addEventListener("mousemove",s,!1),this.domElement.addEventListener("mousedown",l,!1),this.domElement.addEventListener("mouseup",c,!0)},Potree.MeasuringTool.prototype=Object.create(THREE.EventDispatcher.prototype),Potree.ProfileTool=function(e,t,o){function i(){THREE.Object3D.call(this),this.points=[],this.spheres=[],this.edges=[],this.boxes=[],this.width=1,this.height=20;var e=new THREE.SphereGeometry(.4,10,10),t=new THREE.Color(16711680),o=function(){var e=new THREE.MeshLambertMaterial({shading:THREE.SmoothShading,color:16711680,ambient:11184810,depthTest:!1,depthWrite:!1});return e};this.addMarker=function(i){this.points.push(i);var r=new THREE.Mesh(e,o());if(r.addEventListener("mousemove",m),r.addEventListener("mouseleave",v),r.addEventListener("mousedrag",f),r.addEventListener("drop",E),this.add(r),this.spheres.push(r),this.points.length>1){var n=new THREE.Geometry;n.vertices.push(new THREE.Vector3,new THREE.Vector3),n.colors.push(t,t,t);var s=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,linewidth:2,transparent:!0,opacity:.4});s.depthTest=!1;var a=new THREE.Line(n,s);a.visible=!1,this.add(a),this.edges.push(a);var l=new THREE.BoxGeometry(1,1,1),c=new THREE.MeshBasicMaterial({color:16711680,transparent:!0,opacity:.2}),d=new THREE.Mesh(l,c);d.visible=!1,this.add(d),this.boxes.push(d)}this.setPosition(this.points.length-1,i)},this.removeMarker=function(e){this.points.splice(e,1),this.remove(this.spheres[e]),e>0&&(this.remove(this.edges[e-1]),this.edges.splice(e-1,1),this.remove(this.boxes[e-1]),this.boxes.splice(e-1,1)),this.spheres.splice(e,1),this.update()},this.getArea=function(){for(var e=0,t=this.points.length-1,o=0;o<this.points.length;o++){var i=this.points[o],r=this.points[t];e+=(r.x+i.x)*(i.z-r.z),t=o}return Math.abs(e/2)},this.setPosition=function(e,t){var o=this.points[e];o.copy(t),this.update()},this.setWidth=function(e){this.width=e},this.update=function(){if(1===this.points.length){var e=this.points[0];return void this.spheres[0].position.copy(e)}for(var t=this.points[0].clone(),o=this.points[0].clone(),i=new THREE.Vector3,r=this.points.length-1,n=0;r>=n;n++){{var e=this.points[n],s=this.spheres[n],a=0===n?r:n-1,l=n===r?0:n+1,c=this.points[a],d=this.points[l],h=this.edges[a],u=this.edges[n],p=this.boxes[a];this.boxes[n],e.distanceTo(c),e.distanceTo(d),(new THREE.Vector3).addVectors(c,e).multiplyScalar(.5),(new THREE.Vector3).addVectors(e,d).multiplyScalar(.5)}if(s.position.copy(e),h&&(h.geometry.vertices[1].copy(e),h.geometry.verticesNeedUpdate=!0,h.geometry.computeBoundingSphere()),u&&(u.geometry.vertices[0].copy(e),u.geometry.verticesNeedUpdate=!0,u.geometry.computeBoundingSphere()),p){var m=c,v=e,f=m.clone().setY(0).distanceTo(v.clone().setY(0));p.scale.set(f,this.height,this.width);var E=(new THREE.Vector3).addVectors(m,v).multiplyScalar(.5),y=(new THREE.Vector3).subVectors(v,m),g=new THREE.Vector3(y.z,0,-y.x);p.position.set(0,0,0),p.lookAt(g),p.position.copy(E)}i.add(e),t.min(e),o.max(e)}i.multiplyScalar(1/this.points.length);for(var n=0;n<this.boxes.length;n++){var T=this.boxes[n];T.position.y=t.y+(o.y-t.y)/2,T.scale.y=1e6}},this.raycast=function(e,t){for(var o=0;o<this.points.length;o++){var i=this.spheres[o];i.raycast(e,t)}for(var o=0;o<t.length;o++){var r=t[o];r.distance=e.ray.origin.distanceTo(r.point)}t.sort(function(e,t){return e.distance-t.distance})}}function r(e){if(p===u.INSERT){var t=d();if(t){var o=t.clone();h.activeProfile.addMarker(o);var e={type:"newpoint",position:o.clone()};h.dispatchEvent(e)}}}function n(e){if(h.mouse.x=e.clientX/h.domElement.clientWidth*2-1,h.mouse.y=2*-(e.clientY/h.domElement.clientHeight)+1,h.dragstart)h.dragstart.object.dispatchEvent({type:"mousedrag",event:e});else if(p==u.INSERT&&h.activeProfile){var t=d();if(t){var o=h.activeProfile.points.length-1;h.activeProfile.setPosition(o,t)}}else{var t=c();t?(t.object.dispatchEvent({type:"mousemove",target:t.object,event:e}),h.hoveredElement&&h.hoveredElement!==t.object&&h.hoveredElement.dispatchEvent({type:"mouseleave",target:h.hoveredElement,event:e}),h.hoveredElement=t.object):(h.hoveredElement&&h.hoveredElement.dispatchEvent({type:"mouseleave",target:h.hoveredElement,event:e}),h.hoveredElement=null)}}function s(){p==u.INSERT&&h.finishInsertion()}function a(e){if(1===e.which){var t=c();if(t){for(var o=null,i=0;i<h.profiles.length;i++)for(var r=h.profiles[i],n=0;n<r.spheres.length;n++){var a=r.spheres[n];a===t.object&&(o=r.width)}h.dragstart={object:t.object,sceneClickPos:t.point,sceneStartPos:h.sceneRoot.position.clone(),mousePos:{x:h.mouse.x,y:h.mouse.y},widthStart:o}}}else 3===e.which&&s(e)}function l(e){h.dragstart&&(h.dragstart.object.dispatchEvent({type:"drop",event:e}),h.dragstart=null)}function c(){var e=new THREE.Vector3(h.mouse.x,h.mouse.y,.5);e.unproject(h.camera);var t=new THREE.Raycaster;t.ray.set(h.camera.position,e.sub(h.camera.position).normalize());var o=t.intersectObjects(h.profiles);return o.length>0?o[0]:!1}function d(){var e=new THREE.Vector3(h.mouse.x,h.mouse.y,.5);e.unproject(h.camera);var t=e.sub(h.camera.position).normalize(),o=new THREE.Ray(h.camera.position,t),i=[];h.scene.traverse(function(e){e instanceof Potree.PointCloudOctree&&i.push(e)});for(var r=null,n=null,s=0;s<i.length;s++){var a=i[s],l=a.pick(h.renderer,h.camera,o,{accuracy:h.accuracy});if(l){var c=h.camera.position.distanceTo(l.position);(!r||n>c)&&(r=l,n=c)}}return r?r.position:null}var h=this;this.enabled=!1,this.scene=e,this.camera=t,this.renderer=o,this.domElement=o.domElement,this.mouse={x:0,y:0},this.accuracy=.5;{var u={DEFAULT:0,INSERT:1},p=u.DEFAULT;new THREE.SphereGeometry(.4,10,10)}this.activeProfile,this.profiles=[],this.sceneProfile=new THREE.Scene,this.sceneRoot=new THREE.Object3D,this.sceneProfile.add(this.sceneRoot),this.light=new THREE.DirectionalLight(16777215,1),this.light.position.set(0,0,10),this.light.lookAt(new THREE.Vector3(0,0,0)),this.sceneProfile.add(this.light),this.hoveredElement=null;var m=function(e){e.target.material.emissive.setHex(8947848)},v=function(e){e.target.material.emissive.setHex(0)},f=function(e){if(e.event.ctrlKey){var t=new THREE.Vector3(h.dragstart.mousePos.x,h.dragstart.mousePos.y,0),o=new THREE.Vector3(h.mouse.x,h.mouse.y,0),i=h.dragstart.widthStart,r=1-10*(t.y-o.y);if(r=Math.max(.01,r),i)for(var n=0;n<h.profiles.length;n++){var s=h.profiles[n],a=s.spheres.indexOf(h.dragstart.object);if(a>=0){s.setWidth(i*r),s.update();break}}}else{var l=d();if(l)for(var n=0;n<h.profiles.length;n++){var s=h.profiles[n],a=s.spheres.indexOf(h.dragstart.object);if(a>=0){h.profiles[n].setPosition(a,l);break}}}e.event.stopImmediatePropagation()},E=function(){};i.prototype=Object.create(THREE.Object3D.prototype),this.startInsertion=function(e){p=u.INSERT;var e=e||{},t=e.clip||!1,o=e.width||1;this.activeProfile=new i,this.activeProfile.clip=t,this.activeProfile.setWidth(o),this.sceneProfile.add(this.activeProfile),this.profiles.push(this.activeProfile),this.activeProfile.addMarker(new THREE.Vector3(0,0,0))},this.finishInsertion=function(){this.activeProfile.removeMarker(this.activeProfile.points.length-1),this.activeProfile=null,p=u.DEFAULT},this.update=function(){for(var e=0;e<this.profiles.length;e++)for(var o=this.profiles[e],i=0;i<o.spheres.length;i++){var r=o.spheres[i],n=r.getWorldPosition().applyMatrix4(this.camera.matrixWorldInverse),s=(new THREE.Vector4(n.x,n.y,n.z).applyMatrix4(t.projectionMatrix),Math.abs(n.z/60));r.scale.set(s,s,s)}this.light.position.copy(this.camera.position),this.light.lookAt(this.camera.getWorldDirection().add(this.camera.position))},this.render=function(){this.update(),o.render(this.sceneProfile,this.camera)},this.domElement.addEventListener("click",r,!1),this.domElement.addEventListener("mousemove",n,!1),this.domElement.addEventListener("mousedown",a,!1),this.domElement.addEventListener("mouseup",l,!0)},Potree.ProfileTool.prototype=Object.create(THREE.EventDispatcher.prototype),Potree.TransformationTool=function(e,t,o){function i(e){if(a.mouse.x=e.clientX/a.domElement.clientWidth*2-1,a.mouse.y=2*-(e.clientY/a.domElement.clientHeight)+1,a.dragstart)a.dragstart.object.dispatchEvent({type:"mousedrag",event:e});else{var t=s();if(t){var o=t.object;o.dispatchEvent({type:"mousemove",event:e}),a.hoveredElement&&a.hoveredElement!==o&&a.hoveredElement.dispatchEvent({type:"mouseleave",event:e}),a.hoveredElement=o}else a.hoveredElement&&a.hoveredElement.dispatchEvent({type:"mouseleave",event:e}),a.hoveredElement=null}}function r(e){if(1===e.which){var t=s();if(t){for(var o=[],i=[],r=0;r<a.targets.length;r++)o.push(a.targets[r].scale.clone()),i.push(a.targets[r].rotation.clone());a.dragstart={object:t.object,sceneClickPos:t.point,sceneStartPos:a.sceneRoot.position.clone(),mousePos:{x:a.mouse.x,y:a.mouse.y},scales:o,rotations:i}}}else 3===e.which&&a.setTargets([])}function n(e){a.dragstart&&(a.dragstart.object.dispatchEvent({type:"drop",event:e}),a.dragstart=null)}function s(){if(0!==a.targets.length){var e=new THREE.Vector3(a.mouse.x,a.mouse.y,.5);e.unproject(a.camera);var t=new THREE.Raycaster;t.ray.set(a.camera.position,e.sub(a.camera.position).normalize()),t.linePrecision=.2;var o=[];a.translationNode.visible?o.push(a.translationNode):a.scaleNode.visible?o.push(a.scaleNode):a.rotationNode.visible&&(o.push(a.rotationNode),o.push(a.sceneRotation));for(var i=t.intersectObjects(o,!0),r=0;r<i.length;r++){var n=i[r];n.distance=a.camera.position.distanceTo(n.point)}return i.sort(function(e,t){return e.distance-t.distance}),i.length>0?i[0]:!1}}var a=this;this.enabled=!1,this.scene=e,this.camera=t,this.renderer=o,this.domElement=o.domElement,this.mouse={x:0,y:0},this.dragstart=null,this.sceneTransformation=new THREE.Scene,this.sceneRoot=new THREE.Object3D,this.sceneTransformation.add(this.sceneRoot),this.sceneRotation=new THREE.Scene,this.translationNode=new THREE.Object3D,this.rotationNode=new THREE.Object3D,this.scaleNode=new THREE.Object3D,this.sceneRoot.add(this.translationNode),this.sceneRoot.add(this.rotationNode),this.sceneRoot.add(this.scaleNode),this.sceneRoot.visible=!1,this.hoveredElement=null,this.STATE={DEFAULT:0,TRANSLATE_X:1,TRANSLATE_Y:2,TRANSLATE_Z:3,SCALE_X:1,SCALE_Y:2,SCALE_Z:3},this.parts={ARROW_X:{name:"arrow_x",object:void 0,color:new THREE.Color(16711680),state:this.STATE.TRANSLATE_X},ARROW_Z:{name:"arrow_z",object:void 0,color:new THREE.Color(255),state:this.STATE.TRANSLATE_Z},ARROW_Y:{name:"arrow_y",object:void 0,color:new THREE.Color(65280),state:this.STATE.TRANSLATE_Y},SCALE_X:{name:"scale_x",object:void 0,color:new THREE.Color(16711680),state:this.STATE.SCALE_X},SCALE_Z:{name:"scale_z",object:void 0,color:new THREE.Color(255),state:this.STATE.SCALE_Z},SCALE_Y:{name:"scale_y",object:void 0,color:new THREE.Color(65280),state:this.STATE.SCALE_Y},ROTATE_X:{name:"rotate_x",object:void 0,color:new THREE.Color(16711680),state:this.STATE.ROTATE_X},ROTATE_Z:{name:"rotate_z",object:void 0,color:new THREE.Color(255),state:this.STATE.ROTATE_Z},ROTATE_Y:{name:"rotate_y",object:void 0,color:new THREE.Color(65280),state:this.STATE.ROTATE_Y}},this.buildTranslationNode=function(){var e=a.createArrow(a.parts.ARROW_X,a.parts.ARROW_X.color);e.rotation.z=-Math.PI/2;var t=a.createArrow(a.parts.ARROW_Y,a.parts.ARROW_Y.color),o=a.createArrow(a.parts.ARROW_Z,a.parts.ARROW_Z.color);o.rotation.x=-Math.PI/2,this.translationNode.add(e),this.translationNode.add(t),this.translationNode.add(o)},this.buildScaleNode=function(){var e=this.createScaleHandle(a.parts.SCALE_X,16711680);e.rotation.z=-Math.PI/2;var t=this.createScaleHandle(a.parts.SCALE_Y,65280),o=this.createScaleHandle(a.parts.SCALE_Z,255);o.rotation.x=-Math.PI/2,this.scaleNode.add(e),this.scaleNode.add(t),this.scaleNode.add(o)},this.buildRotationNode=function(){var e=this.createRotationCircle(a.parts.ROTATE_X,16711680);e.rotation.y=-Math.PI/2;var t=this.createRotationCircle(a.parts.ROTATE_Y,65280),o=this.createRotationCircle(a.parts.ROTATE_Z,255);t.rotation.x=-Math.PI/2,this.rotationNode.add(e),this.rotationNode.add(t),this.rotationNode.add(o);var i=new THREE.SphereGeometry(2.9,24,24),r=new THREE.Mesh(i,new THREE.MeshBasicMaterial({color:11184810,transparent:!0,opacity:.4}));this.sceneRotation.add(r);var n=function(){r.material.color.setHex(5592405)},s=function(){r.material.color.setHex(11184810)},l=function(e){e.event.stopImmediatePropagation();for(var t=new THREE.Vector3(a.dragstart.mousePos.x,a.dragstart.mousePos.y,.1),o=new THREE.Vector3(a.mouse.x,a.mouse.y,.1),i=(new THREE.Vector3).subVectors(o,t),r=t.clone().unproject(a.camera),n=o.clone().unproject(a.camera),s=(new THREE.Vector3).subVectors(n,r),l=s.clone().normalize(),c=(new THREE.Vector3).subVectors(a.camera.position,r).normalize(),d=c.clone().cross(l),h=6*i.length(),u=0;u<a.targets.length;u++){var p=a.targets[u],m=a.dragstart.rotations[u];p.rotation.copy(m);var v=new THREE.Quaternion;v.setFromAxisAngle(d,h),p.quaternion.multiplyQuaternions(v,p.quaternion)}},c=function(){};r.addEventListener("mousemove",n),r.addEventListener("mouseleave",s),r.addEventListener("mousedrag",l),r.addEventListener("drop",c)},this.createBox=function(e){var t=new THREE.BoxGeometry(1,1,1),o=new THREE.MeshBasicMaterial({color:e,transparent:!0,opacity:.5}),i=new THREE.Mesh(t,o);return i};this.createRotationCircle=function(e,t){for(var o=[],i=128,r=0;i>=r;r++){var n=2*Math.PI*r/i,s=3*Math.cos(n),l=3*Math.sin(n);o.push(new THREE.Vector3(s,l,0))}for(var c=new THREE.Geometry,r=0;r<o.length;r++)c.vertices.push(o[r]);var d=new THREE.LineBasicMaterial({color:t}),h=new THREE.Line(c,d);h.mode=THREE.LineStrip,h.scale.set(1,1,1);var u=function(){d.color.setRGB(1,1,0)},p=function(){d.color.setHex(t)},m=function(t){t.event.stopImmediatePropagation();var o=new THREE.Vector3;e===a.parts.ROTATE_X?o.x=1:e===a.parts.ROTATE_Y?o.y=1:e===a.parts.ROTATE_Z&&(o.z=-1);var i=a.dragstart.sceneClickPos.clone(),r=a.sceneRoot.position.clone(),n=i.clone().sub(r).normalize(),s=i.clone().project(a.camera),l=r.clone().project(a.camera),c=s.clone().sub(l).normalize(),d=(new THREE.Vector3(c.y,c.x,0),new THREE.Vector3(a.dragstart.mousePos.x,a.dragstart.mousePos.y,0),new THREE.Vector3(a.mouse.x,a.mouse.y,0)),h=(new THREE.Plane).setFromNormalAndCoplanarPoint(o,a.sceneRoot.position),u=a.camera.position,p=(new THREE.Vector3(0,0,-1).applyQuaternion(a.camera.quaternion),new THREE.Vector3(d.x,d.y,.5).unproject(a.camera).sub(a.camera.position).normalize()),m=new THREE.Ray(u,p),v=m.intersectPlane(h);if(v){sceneTargetNormal=v.clone().sub(r).normalize();var f,E;e===a.parts.ROTATE_X?(f=2*Math.PI+Math.atan2(n.y,-n.z),E=4*Math.PI+Math.atan2(sceneTargetNormal.y,-sceneTargetNormal.z)):e===a.parts.ROTATE_Y?(f=2*Math.PI+Math.atan2(-n.z,n.x),E=4*Math.PI+Math.atan2(-sceneTargetNormal.z,sceneTargetNormal.x)):e===a.parts.ROTATE_Z&&(f=2*Math.PI+Math.atan2(n.x,n.y),E=4*Math.PI+Math.atan2(sceneTargetNormal.x,sceneTargetNormal.y));for(var y=E-f,g=0;g<a.targets.length;g++){var T=a.targets[g],b=a.dragstart.rotations[g];T.rotation.copy(b);var P=new THREE.Quaternion;P.setFromAxisAngle(o,y),T.quaternion.multiplyQuaternions(P,T.quaternion)}}},v=function(){};return h.addEventListener("mousemove",u),h.addEventListener("mouseleave",p),h.addEventListener("mousedrag",m),h.addEventListener("drop",v),h},this.createScaleHandle=function(e,t){var o=new THREE.BoxGeometry(1,1,1),i=new THREE.MeshBasicMaterial({color:t,depthTest:!1,depthWrite:!1}),r=new THREE.Mesh(o,i);r.scale.set(.3,.3,.3),r.position.set(0,3,0);var n=new THREE.Geometry;n.vertices.push(new THREE.Vector3(0,0,0)),n.vertices.push(new THREE.Vector3(0,3,0));var s=new THREE.LineBasicMaterial({color:t,depthTest:!1,depthWrite:!1}),l=new THREE.Line(n,s),c=new THREE.Object3D;c.add(r),c.add(l),c.partID=e;var d=function(){s.color.setRGB(1,1,0),i.color.setRGB(1,1,0)},h=function(){s.color.setHex(t),i.color.setHex(t)},u=function(t){var o=new THREE.Vector3;e===a.parts.SCALE_X?o.x=1:e===a.parts.SCALE_Y?o.y=1:e===a.parts.SCALE_Z&&(o.z=-1);var i=a.dragstart.sceneClickPos.clone();i.multiply(o),i.z*=-1;var r=a.dragstart.sceneStartPos.clone().project(a.camera),n=a.dragstart.sceneStartPos.clone().add(o).project(a.camera),s=r.clone(),l=n.clone().sub(r);l.normalize();var c=new THREE.Vector3(a.dragstart.mousePos.x,a.dragstart.mousePos.y,0),d=new THREE.Vector3(a.mouse.x,a.mouse.y,0),h=(new THREE.Vector3).subVectors(d,c).dot(l),u=l.clone().multiplyScalar(h).add(s);u.unproject(a.camera);var p=a.sceneRoot.position.clone().sub(u);p.multiply(new THREE.Vector3(-1,-1,1)).addScalar(1);for(var m=0;m<a.targets.length;m++){var v=a.targets[m],f=a.dragstart.scales[m];v.scale.copy(f).add(p),v.scale.x=Math.max(v.scale.x,.01),v.scale.y=Math.max(v.scale.y,.01),v.scale.z=Math.max(v.scale.z,.01)}t.event.stopImmediatePropagation()},p=function(){i.color.set(t)};return r.addEventListener("mousemove",d),r.addEventListener("mouseleave",h),r.addEventListener("mousedrag",u),r.addEventListener("drop",p),l.addEventListener("mousemove",d),l.addEventListener("mouseleave",h),l.addEventListener("mousedrag",u),l.addEventListener("drop",p),c},this.createArrow=function(e,t){var o=new THREE.MeshBasicMaterial({color:t,depthTest:!1,depthWrite:!1}),i=new THREE.Geometry;i.vertices.push(new THREE.Vector3(0,0,0)),i.vertices.push(new THREE.Vector3(0,3,0));var r=new THREE.LineBasicMaterial({color:t,depthTest:!1,depthWrite:!1}),n=new THREE.Line(i,r),s=new THREE.CylinderGeometry(0,.2,.5,10,1,!1),l=o,c=new THREE.Mesh(s,l);c.position.y=3;var d=new THREE.Object3D;d.add(n),d.add(c),d.partID=e,d.material=o;var h=function(){l.color.setRGB(1,1,0),r.color.setRGB(1,1,0)},u=function(){l.color.set(t),r.color.set(t)},p=function(t){var o=new THREE.Vector3;e===a.parts.ARROW_X?o.x=1:e===a.parts.ARROW_Y?o.y=1:e===a.parts.ARROW_Z&&(o.z=-1);var i=a.dragstart.sceneClickPos.clone();i.multiply(o),i.z*=-1;var r=a.dragstart.sceneStartPos.clone().project(a.camera),n=a.dragstart.sceneStartPos.clone().add(o).project(a.camera),s=r.clone(),l=n.clone().sub(r);l.normalize();var c=new THREE.Vector3(a.dragstart.mousePos.x,a.dragstart.mousePos.y,0),d=new THREE.Vector3(a.mouse.x,a.mouse.y,0),h=(new THREE.Vector3).subVectors(d,c).dot(l),u=l.clone().multiplyScalar(h).add(s);u.unproject(a.camera);{var p=a.sceneRoot.position.clone();i.clone().sub(a.dragstart.sceneStartPos)}a.sceneRoot.position.copy(u),p.sub(a.sceneRoot.position);for(var m=0;m<a.targets.length;m++){var v=a.targets[m];v.position.sub(p)}t.event.stopImmediatePropagation()},m=function(){r.color.set(t)};return n.addEventListener("mousemove",h),c.addEventListener("mousemove",h),n.addEventListener("mouseleave",u),c.addEventListener("mouseleave",u),n.addEventListener("mousedrag",p),c.addEventListener("mousedrag",p),n.addEventListener("drop",m),c.addEventListener("drop",m),d},this.setTargets=function(e){if(a.targets=e,0===a.targets.length)return this.sceneRoot.visible=!1,void(this.sceneRotation.visible=!1);this.sceneRoot.visible=!0;var t,o=e[0];if(t=o.geometry&&o.geometry.boundingBox?o.geometry.boundingBox:o.boundingBox){var i=t.clone().applyMatrix4(o.matrixWorld).center();a.sceneRoot.position.copy(i)}},this.update=function(){var e=this.sceneRoot,o=e.getWorldPosition().applyMatrix4(this.camera.matrixWorldInverse),i=(new THREE.Vector4(o.x,o.y,o.z).applyMatrix4(t.projectionMatrix),Math.abs(o.z/20));e.scale.set(i,i,i),this.targets&&1===this.targets.length&&this.scaleNode.rotation.copy(this.targets[0].rotation),this.sceneRotation.scale.set(i,i,i)},this.render=function(){this.update(),this.sceneRotation.position.copy(this.sceneRoot.position),this.sceneRotation.visible=this.rotationNode.visible&&this.sceneRoot.visible,o.render(this.sceneRotation,this.camera),o.render(this.sceneTransformation,this.camera)},this.translate=function(){this.translationNode.visible=!0,this.scaleNode.visible=!1,this.rotationNode.visible=!1},this.scale=function(){this.translationNode.visible=!1,this.scaleNode.visible=!0,this.rotationNode.visible=!1},this.rotate=function(){this.translationNode.visible=!1,this.scaleNode.visible=!1,this.rotationNode.visible=!0},this.buildTranslationNode(),this.buildScaleNode(),this.buildRotationNode(),this.rotate(),this.setTargets([]),this.domElement.addEventListener("mousemove",i,!0),this.domElement.addEventListener("mousedown",r,!0),this.domElement.addEventListener("mouseup",n,!0)},Potree.VolumeTool=function(e,t,o){function i(){THREE.Object3D.call(this),this._clip=!1;var e=new THREE.MeshBasicMaterial({color:65280,transparent:!0,opacity:.3});this.box=new THREE.Mesh(p,e),this.box.geometry.computeBoundingBox(),this.boundingBox=this.box.geometry.boundingBox,this.add(this.box),this.frame=new THREE.Line(m,new THREE.LineBasicMaterial({color:0})),this.frame.mode=THREE.LinePieces,this.add(this.frame),this.label=new Potree.TextSprite("0"),this.label.setBorderColor({r:0,g:255,b:0,a:0}),this.label.setBackgroundColor({r:0,g:255,b:0,a:0}),this.label.material.depthTest=!1,this.label.position.y-=.5,this.add(this.label),this.volume=function(){return Math.abs(this.scale.x*this.scale.y*this.scale.z)},this.update=function(){this.boundingBox=this.box.geometry.boundingBox},this.raycast=function(e,t){var o=[];if(this.box.raycast(e,o),o.length>0){var i=o[0];t.push({distance:i.distance,object:this,point:i.point.clone()})}}}function r(e){d.mouse.x=e.clientX/d.domElement.clientWidth*2-1,d.mouse.y=2*-(e.clientY/d.domElement.clientHeight)+1}function n(){}function s(e){if(u===h.INSERT_VOLUME)d.finishInsertion();else if(1===e.which){var t=l();t&&transformationTool.setTargets([t.object])}3===e.which}function a(e){return e.preventDefault(),!1}function l(){var e=new THREE.Vector3(d.mouse.x,d.mouse.y,.5);e.unproject(d.camera);var t=new THREE.Raycaster;t.ray.set(d.camera.position,e.sub(d.camera.position).normalize());for(var o=[],i=0;i<d.volumes.length;i++){var r=d.volumes[i];o.push(r)}var n=t.intersectObjects(o,!1);return n.length>0?n[0]:!1}function c(){var e=new THREE.Vector3(d.mouse.x,d.mouse.y,.5);e.unproject(d.camera);var t=e.sub(d.camera.position).normalize(),o=new THREE.Ray(d.camera.position,t),i=[];d.scene.traverse(function(e){e instanceof Potree.PointCloudOctree&&i.push(e)});for(var r=null,n=null,s=0;s<i.length;s++){var a=i[s],l=a.pick(d.renderer,d.camera,o,{accuracy:d.accuracy});if(l){var c=d.camera.position.distanceTo(l.position);(!r||n>c)&&(r=l,n=c)}}return r?r.position:null}var d=this;this.enabled=!1,this.scene=e,this.sceneVolume=new THREE.Scene,this.camera=t,this.renderer=o,this.domElement=o.domElement,this.mouse={x:0,y:0},this.accuracy=.5,this.volumes=[];
var h={DEFAULT:0,INSERT_VOLUME:1},u=h.DEFAULT,p=new THREE.BoxGeometry(1,1,1);p.computeBoundingBox();var m=new THREE.Geometry;m.vertices.push(new THREE.Vector3(-.5,-.5,.5)),m.vertices.push(new THREE.Vector3(.5,-.5,.5)),m.vertices.push(new THREE.Vector3(.5,-.5,.5)),m.vertices.push(new THREE.Vector3(.5,-.5,-.5)),m.vertices.push(new THREE.Vector3(.5,-.5,-.5)),m.vertices.push(new THREE.Vector3(-.5,-.5,-.5)),m.vertices.push(new THREE.Vector3(-.5,-.5,-.5)),m.vertices.push(new THREE.Vector3(-.5,-.5,.5)),m.vertices.push(new THREE.Vector3(-.5,.5,.5)),m.vertices.push(new THREE.Vector3(.5,.5,.5)),m.vertices.push(new THREE.Vector3(.5,.5,.5)),m.vertices.push(new THREE.Vector3(.5,.5,-.5)),m.vertices.push(new THREE.Vector3(.5,.5,-.5)),m.vertices.push(new THREE.Vector3(-.5,.5,-.5)),m.vertices.push(new THREE.Vector3(-.5,.5,-.5)),m.vertices.push(new THREE.Vector3(-.5,.5,.5)),m.vertices.push(new THREE.Vector3(-.5,-.5,.5)),m.vertices.push(new THREE.Vector3(-.5,.5,.5)),m.vertices.push(new THREE.Vector3(.5,-.5,.5)),m.vertices.push(new THREE.Vector3(.5,.5,.5)),m.vertices.push(new THREE.Vector3(.5,-.5,-.5)),m.vertices.push(new THREE.Vector3(.5,.5,-.5)),m.vertices.push(new THREE.Vector3(-.5,-.5,-.5)),m.vertices.push(new THREE.Vector3(-.5,.5,-.5)),i.prototype=Object.create(THREE.Object3D.prototype),Object.defineProperty(i.prototype,"clip",{get:function(){return this._clip},set:function(e){this._clip=e,this._clip?(this.box.visible=!1,this.label.visible=!1):(this.box.visible=!0,this.label.visible=!0)}}),this.update=function(){if(u===h.INSERT_VOLUME){var e=c();if(e){this.activeVolume.position.copy(e);var t=this.activeVolume.getWorldPosition().applyMatrix4(this.camera.matrixWorldInverse),o=(new THREE.Vector4(t.x,t.y,t.z).applyMatrix4(this.camera.projectionMatrix),Math.abs(t.z/10));this.activeVolume.scale.set(o,o,o)}}for(var i=[],r=0;r<this.volumes.length;r++)i.push(this.volumes[r]);this.activeVolume&&i.push(this.activeVolume);for(var r=0;r<i.length;r++){var n=i[r],s=(n.box,n.label),a=n.volume(),l=Potree.utils.addCommas(a.toFixed(1))+"³",t=s.getWorldPosition().applyMatrix4(this.camera.matrixWorldInverse),o=(new THREE.Vector4(t.x,t.y,t.z).applyMatrix4(this.camera.projectionMatrix),Math.abs(t.z/5));s.setText(l);var d=s.scale.length();s.scale.multiplyScalar(o/d)}},this.startInsertion=function(e){u=h.INSERT_VOLUME;var e=e||{},t=e.clip||!1;this.activeVolume=new i,this.activeVolume.clip=t,this.sceneVolume.add(this.activeVolume)},this.finishInsertion=function(){this.volumes.push(this.activeVolume),transformationTool.setTargets([this.activeVolume]),this.activeVolume=null,u=h.DEFAULT},this.render=function(){o.render(this.sceneVolume,this.camera)},this.domElement.addEventListener("click",n,!1),this.domElement.addEventListener("mousedown",s,!1),this.domElement.addEventListener("mousemove",r,!1),this.domElement.addEventListener("contextmenu",a,!1)};